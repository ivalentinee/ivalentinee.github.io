<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ru"><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="https://ivalentinee.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ivalentinee.github.io/" rel="alternate" type="text/html" hreflang="ru" /><updated>2019-06-06T20:16:04+00:00</updated><id>https://ivalentinee.github.io/feed.xml</id><title type="html">ivalentinee</title><entry xml:lang="ru"><title type="html">Авторизация в MVC-приложениях</title><link href="https://ivalentinee.github.io/ru/programming/2019/05/04/MVC-authorization.html" rel="alternate" type="text/html" title="Авторизация в MVC-приложениях" /><published>2019-05-04T00:00:00+00:00</published><updated>2019-05-04T00:00:00+00:00</updated><id>https://ivalentinee.github.io/ru/programming/2019/05/04/MVC-authorization</id><content type="html" xml:base="https://ivalentinee.github.io/ru/programming/2019/05/04/MVC-authorization.html">&lt;h2 id=&quot;предисловие&quot;&gt;Предисловие&lt;/h2&gt;

&lt;p&gt;Как-то давно у моего коллеги всплыл вопрос про организацию авторизации. Вступили мы с ним в диалог, в рамках которого я предложил некоторую теоретическую модель. Относительно недавно мне и самому пришлось делать похожую систему авторизации на проекте, и я взглянул на это всё с практической точки зрения. Посему хочу поделиться с &lt;del&gt;миром&lt;/del&gt; &lt;del&gt;читателями&lt;/del&gt; самим собой размышлениями на эту тему.&lt;/p&gt;

&lt;p&gt;Перед прочтением рекомендую ознакомиться с &lt;a href=&quot;/ru/programming/2018/06/26/authorization-authentication-and-identification.html&quot;&gt;понятием авторизации&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Умных книжек на тему авторизации я не читал. Если у вас есть возможность, лучше прочитайте умные книжки, а не этот пост.&lt;/p&gt;

&lt;h2 id=&quot;подбиваем-базу&quot;&gt;Подбиваем базу&lt;/h2&gt;
&lt;p&gt;Определимся, какие сущности у нас участвуют в авторизации (т.е. в процессе определения доступа к совершению действия), и как определяется сама авторизация.&lt;/p&gt;

&lt;h3 id=&quot;система&quot;&gt;Система&lt;/h3&gt;
&lt;p&gt;В широком смысле — вся система, с которой производится взаимодействие.&lt;/p&gt;

&lt;p&gt;В узком смысле — тот модуль, который осуществляет авторизацию.&lt;/p&gt;

&lt;p&gt;Стоит добавить, что чаще всего реакцией на отрицательный результат авторизации занимается тот же модуль. Но это скорее из-за удобства, потому что в идеале этим должен заниматься модуль ввода-вывода.&lt;/p&gt;

&lt;h4 id=&quot;модуль-ввода-вывода&quot;&gt;Модуль ввода-вывода&lt;/h4&gt;
&lt;p&gt;В случае MVC приложений этим модулем будет связка view и controller. К чему нас это приведёт, увидим позже.&lt;/p&gt;

&lt;h3 id=&quot;субъект&quot;&gt;Субъект&lt;/h3&gt;
&lt;p&gt;Тот, кто совершает операцию.&lt;/p&gt;

&lt;p&gt;При этом есть &lt;strong&gt;внешний субъект&lt;/strong&gt; — тот самый человек (или не человек), который взаимодействует с системой.&lt;/p&gt;

&lt;p&gt;Есть &lt;strong&gt;внутренний субъект&lt;/strong&gt; — объект внутри системы, который отвечает за отображение &lt;strong&gt;внешнего субъекта&lt;/strong&gt;. Чаще всего это запись о пользователе.&lt;/p&gt;

&lt;p&gt;Так как за отображение внешнего субъекта во внутренний отвечает аутентификация, рассматривать этот вопрос в статье не будем, а предположим, что отображение уже совершено (и это всегда так и есть) и под &lt;strong&gt;субъектом&lt;/strong&gt; будем подразумевать &lt;strong&gt;внутреннего субъекта&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Далее &lt;strong&gt;субъект&lt;/strong&gt; может обозначаться как &lt;strong&gt;s&lt;/strong&gt; (&lt;script type=&quot;math/tex&quot;&gt;s ∈ S&lt;/script&gt;).&lt;/p&gt;

&lt;h3 id=&quot;действие&quot;&gt;Действие&lt;/h3&gt;
&lt;p&gt;То, что хочет совершить &lt;strong&gt;субъект&lt;/strong&gt; в системе. Типичное действие в мире веба (и не только) — одна из &lt;a href=&quot;https://ru.wikipedia.org/wiki/CRUD&quot;&gt;CRUD-операций&lt;/a&gt;. Но, конечно, действия могут быть любыми. Например распечатка документа на принтере. Или запуск ядерной ракеты.&lt;/p&gt;

&lt;p&gt;Далее &lt;strong&gt;действие&lt;/strong&gt; может обозначаться как &lt;strong&gt;a&lt;/strong&gt; (&lt;script type=&quot;math/tex&quot;&gt;a ∈ A&lt;/script&gt;).&lt;/p&gt;

&lt;p&gt;Как и субъект, действие внешнее отображается в действие внутрненнее.&lt;/p&gt;

&lt;h3 id=&quot;объект&quot;&gt;Объект&lt;/h3&gt;
&lt;p&gt;То, над чем &lt;strong&gt;субъект&lt;/strong&gt; хочет совершить &lt;strong&gt;действие&lt;/strong&gt;. Например, пользователь хочет удалить свой комментарий. В данном случае комментарий — и есть &lt;strong&gt;объект&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Под &lt;strong&gt;объектом&lt;/strong&gt; (&lt;script type=&quot;math/tex&quot;&gt;o ∈ O&lt;/script&gt;) в рамках данной статейки будем понимать &lt;strong&gt;объект авторизации&lt;/strong&gt;. Но тут важно понимать, что &lt;strong&gt;объектом авторизации&lt;/strong&gt; может в разных условиях быть как один &lt;strong&gt;объект системы&lt;/strong&gt; (&lt;script type=&quot;math/tex&quot;&gt;so ∈ SO&lt;/script&gt;), так и несколько. Пример с ядерной ракетой: если пользователь хочет запустить ракету с точкой назначения “Вашингтон”, то &lt;strong&gt;объектом авторизации&lt;/strong&gt; может быть как конкретная “ядерная ракета”, так и “Вашингтон”, и даже оба одновременно.&lt;/p&gt;

&lt;p&gt;При этом объектом авторизации может являться как один объект системы, так и несколько. Но для устранения неоднозначности каждый такой &lt;strong&gt;объект авторизации&lt;/strong&gt; должен содержать уникальный набор &lt;strong&gt;объектов системы&lt;/strong&gt;. То есть &lt;strong&gt;объект авторизации&lt;/strong&gt; является уникальным подмножеством всех объектов системы:
&lt;script type=&quot;math/tex&quot;&gt;O = \{o | o ⊆ SO\}&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Также как и субъекты, объекты рассматриваем только внутренние.&lt;/p&gt;

&lt;h3 id=&quot;политика-правила-авторизации&quot;&gt;Политика (правила) авторизации&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Политикой&lt;/strong&gt; или &lt;strong&gt;набором правил&lt;/strong&gt; авторизации будем называть некоторый предикат &lt;script type=&quot;math/tex&quot;&gt;p&lt;/script&gt;, на основании которого можно определить, имеет ли возможность &lt;strong&gt;субъект&lt;/strong&gt; совершить &lt;strong&gt;действие&lt;/strong&gt; над &lt;strong&gt;объектом&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Из указанного определения следует, что областью определения предиката является декартово произведение множеств &lt;strong&gt;субъектов&lt;/strong&gt;, &lt;strong&gt;действий&lt;/strong&gt; и &lt;strong&gt;объектов&lt;/strong&gt; (&lt;script type=&quot;math/tex&quot;&gt;D_p = S × A × O&lt;/script&gt;).&lt;/p&gt;

&lt;h4 id=&quot;чёрные-и-белые-списки&quot;&gt;Чёрные и белые списки&lt;/h4&gt;
&lt;p&gt;Для большинства этот пункт очевиден, но всё-таки я напишу.&lt;/p&gt;

&lt;p&gt;Правила могут быть двух видов: разрешающие и запрещающие. Набор разрешающих правил называется «белый список», а набор запрещающих — «чёрный список».&lt;/p&gt;

&lt;h4 id=&quot;принцип-замкнутости-в-отношении-правил&quot;&gt;Принцип замкнутости в отношении правил&lt;/h4&gt;
&lt;p&gt;Принцип замкнутости для правил политики авторизации можно сформулировать так: «Если для субъекта &lt;script type=&quot;math/tex&quot;&gt;s_x ∈ S&lt;/script&gt;, действия &lt;script type=&quot;math/tex&quot;&gt;a_y ∈ A&lt;/script&gt; и объекта &lt;script type=&quot;math/tex&quot;&gt;o_z ∈ O&lt;/script&gt; не определено значение предиката p, то считаем, что высказывание &lt;script type=&quot;math/tex&quot;&gt;p(\{s_x, a_y, o_z\})&lt;/script&gt; будет ложным». Этот принцип (или аксиома — как хотите) позволяет не определять правила для всех возможных случаев, а только специфицировать минимально необходимые.&lt;/p&gt;

&lt;p&gt;Можно сказать (неформально), что исходным высказыванием политики белого списка является «никому ничего нельзя», а правила указывают на исключения, в то время как исходным высказыванием политики чёрного списка является «всем всё можно», а правила указывают на исключения.&lt;/p&gt;

&lt;p&gt;Во-первых, для устранения неоднозначности следует всегда использовать только один список. В противном случае нарушается принцип замкнутости и нам надо будет писать правила для всех случаев. Такой себе вариант.&lt;/p&gt;

&lt;p&gt;Во-вторых, исходное высказывание чёрного списка является чрезвычайно опасным, потому что отсутствие а не наличие правила предоставляет доступ к действию. А отсутствие правила контролировать обычно сложнее.&lt;/p&gt;

&lt;h4 id=&quot;разбиение-предиката&quot;&gt;Разбиение предиката&lt;/h4&gt;
&lt;p&gt;Так как писать одно большое правило для всего и вся — такая себе затея (ну просто представьте себе этот безумный огромный &lt;code class=&quot;highlighter-rouge&quot;&gt;if&lt;/code&gt;), обычно предикат разбивают на несколько меньших объединённых дизъюнкцией: &lt;script type=&quot;math/tex&quot;&gt;p := \displaystyle\bigvee_{i=1}^{n} p_i&lt;/script&gt;.&lt;/p&gt;

&lt;h4 id=&quot;выделение-групп-объектов&quot;&gt;Выделение групп объектов&lt;/h4&gt;
&lt;p&gt;Так как зачастую объекты системы являются изменяемыми данными, прописывать правило для каждой тройки &lt;script type=&quot;math/tex&quot;&gt;\{s, a, o\}&lt;/script&gt; не представляется возможным. В таком случае предикат политики авторизации описывается с помощью правил, выделяющих подмножество из &lt;script type=&quot;math/tex&quot;&gt;D_p&lt;/script&gt;.&lt;/p&gt;

&lt;p&gt;Логичнее всего выделять наибольшие подмножества, которые имеют значения с точки зрения бизнеса и для каждого определять меньший предикат: &lt;script type=&quot;math/tex&quot;&gt;p(D_p) := \displaystyle\bigvee_{i=1}^{n} p_i(D_{pi}), D_{pi} ⊆ D_p&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Можно ввести требование, при котором подмножества &lt;script type=&quot;math/tex&quot;&gt;D_{pi}&lt;/script&gt; не должны пересекаться, в таком случае каждый отдельный меньший предикат &lt;script type=&quot;math/tex&quot;&gt;P_i&lt;/script&gt; будет однозначно определять, будет ли конкретный случай &lt;script type=&quot;math/tex&quot;&gt;\{s_x, a_y, o_z\} ∈ D_p&lt;/script&gt; разрешён или запрещён: &lt;script type=&quot;math/tex&quot;&gt;p(D_p) := \displaystyle\bigvee_{i=1}^{n} p_i(D_{pi}), D_{pi} ⊆ D_p, i ≠ j, D_{pi} ⊄ D_{pj}&lt;/script&gt;.&lt;/p&gt;

&lt;h2 id=&quot;общий-процесс&quot;&gt;Общий процесс&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2019-05-04-MVC-authorization/Generic authorization flow.png&quot; alt=&quot;Общий процесс совершения действия с авторизацией&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;определение-субъекта&quot;&gt;Определение субъекта&lt;/h3&gt;
&lt;p&gt;Как я уже писал выше, определением (отображением внешнего во внутренний) объекта занимается процесс &lt;a href=&quot;/ru/programming/2018/06/26/authorization-authentication-and-identification.html&quot;&gt;аутентификации или идентификации&lt;/a&gt;. На обе темы написаны не только статьи, а целые книги, разработаны мегатонны технологий (&lt;a href=&quot;https://ru.wikipedia.org/wiki/Kerberos&quot;&gt;kerberos?&lt;/a&gt;, &lt;a href=&quot;https://en.wikipedia.org/wiki/Transport_Layer_Security#Client-authenticated_TLS_handshake&quot;&gt;tls?&lt;/a&gt;), поэтому эта тема не стала предметом рассмотрения данной статьи.&lt;/p&gt;

&lt;h3 id=&quot;определение-объекта&quot;&gt;Определение объекта&lt;/h3&gt;
&lt;p&gt;А вот тут даже в общем случае есть что написать.&lt;/p&gt;

&lt;h4 id=&quot;идентификация&quot;&gt;Идентификация&lt;/h4&gt;
&lt;p&gt;Для большинства действий отображение объекта производится по данным, приходящим из системы ввода-вывода. Например, получение поста по его идентификатору: &lt;code class=&quot;highlighter-rouge&quot;&gt;SELECT * FROM posts WHERE id=&amp;amp;post_id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Важно заметить, что отображение происходит не на &lt;strong&gt;объект авторизации&lt;/strong&gt; (потому что внешнего объекта авторизации в явном виде нет), а на &lt;strong&gt;объект системы&lt;/strong&gt;. И уже из &lt;strong&gt;объекта системы&lt;/strong&gt; (или нескольких) определяется &lt;strong&gt;объект авторизации&lt;/strong&gt;.&lt;/p&gt;

&lt;h4 id=&quot;замена-объекта-авторизации&quot;&gt;Замена объекта авторизации&lt;/h4&gt;
&lt;p&gt;В качестве сценария для рассмотрения замены &lt;strong&gt;объекта авторизации&lt;/strong&gt; можно рассмотреть добавление объекта, хотя, очевидно, данный подход можно применить для любого класса действия.&lt;br /&gt;
С добавлением объекта сложность в том, что новый объект ещё не является &lt;strong&gt;объектом системы&lt;/strong&gt; (&lt;script type=&quot;math/tex&quot;&gt;so_{new} ∉ SO&lt;/script&gt;), поэтому он не входит в область определения предиката авторизации.&lt;/p&gt;

&lt;p&gt;В таком случае можно рассматривать в качестве &lt;strong&gt;объекта авторизации&lt;/strong&gt; множество или подмножество, которое пользователь хочет изменить.&lt;/p&gt;

&lt;p&gt;Рассмотрим три случая.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Замена на пустое множество.&lt;br /&gt;
В ряде случаев нет возможности однозначно идентифицировать &lt;strong&gt;объект авторизации&lt;/strong&gt;. Для таких сценариев можно рассматривать &lt;strong&gt;множество всех объектов системы&lt;/strong&gt; (&lt;script type=&quot;math/tex&quot;&gt;SO&lt;/script&gt;) в качестве &lt;strong&gt;объекта авторизации&lt;/strong&gt;, так как действием является расширение этого множества. Но ввиду того, что такие действия де-факто не зависят от &lt;script type=&quot;math/tex&quot;&gt;SO&lt;/script&gt;, то его (&lt;script type=&quot;math/tex&quot;&gt;SO&lt;/script&gt;) можно заменить на &lt;strong&gt;пустое множество&lt;/strong&gt;.&lt;br /&gt;
Я бы предложил для такой замены название «&lt;strong&gt;нуль-замена&lt;/strong&gt;».&lt;br /&gt;
Признаком возможности такой замены является &lt;strong&gt;отсутствие идентификационных данных&lt;/strong&gt; для определения конкретного &lt;strong&gt;объекта авторизации&lt;/strong&gt;.&lt;br /&gt;
Примером такого сценария является &lt;em&gt;добавление поста&lt;/em&gt;. Пользователь либо может добавить пост, либо не может, и это никак не зависит ни от добавляемого поста, ни от других объектов в системе.&lt;/li&gt;
  &lt;li&gt;Класс объектов как &lt;strong&gt;объект авторизации&lt;/strong&gt;&lt;br /&gt;
Для предыдущего случая можно рассмотреть в качестве &lt;strong&gt;объекта авторизации&lt;/strong&gt; множество постов, если явно обозначен идентификатор этого множества. Тогда для данного действия объектом авторизации будет (&lt;script type=&quot;math/tex&quot;&gt;o = Posts, post ∈ Posts ⊆ SO&lt;/script&gt;). Очевидно, что для данного сценария &lt;strong&gt;нуль-замена&lt;/strong&gt; не требуется.&lt;/li&gt;
  &lt;li&gt;Замена на владельца.&lt;br /&gt;
Рассмотрим добавление комментария к постам. В этом случае в качестве &lt;strong&gt;объекта авторизации&lt;/strong&gt; выступит множество комментариев к &lt;strong&gt;конкретному посту&lt;/strong&gt;. Но в таком случае, опять же, удобно делать де-факто замену &lt;strong&gt;множества комментариев к посту&lt;/strong&gt; на сам &lt;strong&gt;пост&lt;/strong&gt; как &lt;strong&gt;объект авторизации&lt;/strong&gt;. Подобно предыдущему пункту данная замена противоречит строгой теории, но позволяет сделать правила авторизации (&lt;script type=&quot;math/tex&quot;&gt;p_i(D_{pi})&lt;/script&gt;) проще и понятнее, а также лучше соответствовать внешним (бизнесовым) правилам.&lt;br /&gt;
Я бы предложил для такой замены название «&lt;strong&gt;замена объектом-владельцем&lt;/strong&gt;», потому что в данном случае множество определяется через пренадлежность какому-то другому объекту (владельцу).&lt;br /&gt;
Про каскадную замену объектом-владельцем мне лень писать, честно.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Про выбор «&lt;strong&gt;нуль-замены&lt;/strong&gt;» или &lt;strong&gt;классов объектов&lt;/strong&gt; напишу в пункте про определение действия.&lt;/p&gt;

&lt;h4 id=&quot;групповые-действия&quot;&gt;Групповые действия&lt;/h4&gt;
&lt;p&gt;Зачастую нужно произвести действие сразу с несколькими объектами. В данном случае ответом на групповое действие, очевидно, будет конъюнкция из атомарных действий:
&lt;script type=&quot;math/tex&quot;&gt;p_{group} = \displaystyle\bigwedge_{i=1}^k p_i&lt;/script&gt;.&lt;/p&gt;

&lt;h3 id=&quot;определение-действия&quot;&gt;Определение действия&lt;/h3&gt;
&lt;p&gt;В общем случае отображение действия полностью зависит от системы ввода-вывода. Но есть повод рассмотреть определение базового класса объектов для действий.&lt;/p&gt;

&lt;p&gt;Для действий «добавить комментарий к посту №2», «изменить пост №3», «распечатать отчёт о всех моих постах», «запустить ядерную ракету в направлении Вашингтона» рассмотрим два подхода.&lt;/p&gt;

&lt;h4 id=&quot;широкие-действия&quot;&gt;«Широкие» действия&lt;/h4&gt;
&lt;p&gt;В таком случае действия могут описываться как «добавить», «изменить», «распечатать», «запустить». А классы &lt;strong&gt;объектов системы&lt;/strong&gt; будут либо выводиться на уровне идентификации, либо поступать в качестве данных.&lt;/p&gt;

&lt;p&gt;Идентификацируемое подмножества объектов (а не одного) как &lt;strong&gt;объекта авторизации&lt;/strong&gt; я называю &lt;strong&gt;базовым классом действия&lt;/strong&gt;, потому что используемый идентификатор в таких случаях используется для выделения класса объектов из всего множества объектов.&lt;/p&gt;

&lt;p&gt;Для «широких» действий нет возможности применить «&lt;strong&gt;нуль-замену&lt;/strong&gt;», потому что идентифицируемый &lt;strong&gt;объект системы&lt;/strong&gt; (или базовый класс) (и на основании него определёный &lt;strong&gt;объект авторизации&lt;/strong&gt;) позволяет специфицировать область, на которой определён предикат (или, очевидно, меньший предикат).&lt;/p&gt;

&lt;h4 id=&quot;узкие-действия&quot;&gt;«Узкие» действия&lt;/h4&gt;
&lt;p&gt;«Узкие» действия описываются как «добавить комментарий к посту», «изменить пост», «распечатать отчёт о всех моих постах», «запустить ракету в направлении города». Очевидно, что в отличии от «широких» действий класс объектов уже включён в само действие, а потому повторное его использование для специфицирования области не требуется, поэтому «&lt;strong&gt;нуль-замену&lt;/strong&gt;» вполне можно и нужно применять.&lt;/p&gt;

&lt;h4 id=&quot;выбор-между-узкими-и-широкими-действиями&quot;&gt;Выбор между узкими и широкими действиями&lt;/h4&gt;
&lt;p&gt;Не смотря на то, что подходы рассмотрены отдельно, в реальных программах предикат может быть одновременно и «узким» и «широким», специфицируя условие и в самом действии и в идентификаторах объектов системы.&lt;/p&gt;

&lt;h2 id=&quot;применительно-к-реальному-миру&quot;&gt;Применительно к реальному миру&lt;/h2&gt;
&lt;p&gt;Теперь можно поговорить про типичные MVC-web приложения.&lt;/p&gt;

&lt;p&gt;Тут я буду исходить из модульной rack-/plug-style системы.&lt;/p&gt;

&lt;p&gt;Чаще всего (хотя можно и по-другому) используется такая схема:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2019-05-04-MVC-authorization/MVC authorization.png&quot; alt=&quot;Совершение действия с авторизацией в MVC&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;а-где-объект-авторизации&quot;&gt;А где объект авторизации?&lt;/h3&gt;
&lt;p&gt;Это была первая проблема, с которой я столкнулся, когда понадобилась полноценная система авторизации.&lt;/p&gt;

&lt;p&gt;Большая часть предлагаемых решений работают на основе предиката &lt;script type=&quot;math/tex&quot;&gt;p(\{s, a\}), \{s, a\} ∈ S×A&lt;/script&gt; вместо &lt;script type=&quot;math/tex&quot;&gt;p(\{s, a, o\})&lt;/script&gt;. Компенсируется это обычно за счёт использования «узких» действий и исключения объектов авторизации из области определения предиката.&lt;br /&gt;
Очевидно, что в таком случае нет никакого способа запретить действия, которые действительно зависят от объекта авторизации. Пример: «Пользователи, которые не являются администраторами не имеют права редактировать и удалять не свои посты».&lt;/p&gt;

&lt;h4 id=&quot;как-можно-обойтись-без-объекта-авторизации&quot;&gt;Как можно обойтись без объекта авторизации&lt;/h4&gt;
&lt;p&gt;На самом деле можно обойтись без объекта авторизации, перенося политику авторизации на уровень логики приложения.&lt;/p&gt;

&lt;p&gt;Для указанного выше примера удаление логически делается только среди собственных постов: &lt;code class=&quot;highlighter-rouge&quot;&gt;DELETE FROM posts WHERE author_id=&amp;amp;current_user_id AND id=&amp;amp;post_id&lt;/code&gt;.&lt;br /&gt;
А для администраторов добавляется отдельный доступный только им список постов, где можно делать всё что угодно.&lt;/p&gt;

&lt;p&gt;Проблемы, как видно из примера, две:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Действия приходится делать очень «узкими», чтобы с помощью субъекта и действия можно было как-то ограничивать доступ.&lt;/li&gt;
  &lt;li&gt;Там, где такой способ не позволяет полностью контролировать действие, ограничение переносится на уровень логики работы.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;И если в первом случае ещё нет явных проблем (хотя архитектура интерфейса страдает), вторая проблема куда хуже.&lt;/p&gt;

&lt;p&gt;Перенося разграничение прав на уровень логики мы &lt;strong&gt;разделяем одно бизнес правило (нельзя/можно что-то делать) на несколько высказываний в коде&lt;/strong&gt;.&lt;br /&gt;
Таким образом программист, который откроет оригинальную задачу в трекере и начнёт искать соответствующий код в политиках авторизации может потратить на поиск ответственного участка кода больше времени.&lt;br /&gt;
Ну и бонусом: пользователь вместо ошибки 403 получит ошибку 404. Хотя чаще всего это не сильно портит проектирование интерфейса.&lt;/p&gt;

&lt;h4 id=&quot;всё-таки-получаем-объект-авторизации&quot;&gt;Всё-таки получаем объект авторизации&lt;/h4&gt;
&lt;p&gt;Казалось бы, на схеме всё исправляется просто:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/2019-05-04-MVC-authorization/MVC authorization with object.png&quot; alt=&quot;Совершение действия с авторизацией и объектом в MVC&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Но в действительности теперь надо делать &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt; в не в контроллере, а до него.&lt;/p&gt;

&lt;p&gt;В модульной системе всё достаточно просто: добавляем перед контроллером и модулем авторизации блок, который предзагружает данные, а затем в контроллере делаем на пару селектов меньше:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PostController&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:controller&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Plugs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PreloadObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;function:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;__MODULE__&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preload_post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;as:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;ow&quot;&gt;when&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:show&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;plug&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Plugs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Authorization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;for:&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preload_post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;%{&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;id&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Posts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;В данном случае &lt;code class=&quot;highlighter-rouge&quot;&gt;App.Plugs.PreloadObject&lt;/code&gt; использует указанную функцию загрузки и складывает объект авторизации в &lt;code class=&quot;highlighter-rouge&quot;&gt;conn&lt;/code&gt;, а затем &lt;code class=&quot;highlighter-rouge&quot;&gt;App.Plugs.Authorization&lt;/code&gt; на основе этого объекта и правил авторизации определяет, можно ли выполнять действие.&lt;/p&gt;

&lt;p&gt;Преимущества такого подхода очевидны:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Получаем возможность полноценно определить предикат &lt;script type=&quot;math/tex&quot;&gt;p(\{s, a, o\})&lt;/script&gt;.&lt;/li&gt;
  &lt;li&gt;Ошибки 404 и 403 теперь чётко разграничены.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Теперь о недостатках:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Теперь контроллер — не единственная точка работы с данными на пути обработки запроса! Если поменяется код работы (в частности &lt;code class=&quot;highlighter-rouge&quot;&gt;select&lt;/code&gt;) с постами — надо будет идти потенциально в два места.&lt;/li&gt;
  &lt;li&gt;Теперь при определении полноценного предиката нет возможности проверить доступность до получения объекта. И хотя это — то, к чему мы осознанно шли, в высоконагруженных системах такое поведение может значительно добавить нагрузки в тех сценариях, когда большая часть запросов может быть отвергнута с использованием &lt;script type=&quot;math/tex&quot;&gt;p(\{s, a\})&lt;/script&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&quot;использование-полноценного-предиката-до-отображения-объекта-авторизации&quot;&gt;Использование полноценного предиката до отображения объекта авторизации&lt;/h4&gt;
&lt;p&gt;Теоретическая возможность сделать двухэтапную авторизацию для высоконагруженных систем есть: достаточно свести предикат в области &lt;script type=&quot;math/tex&quot;&gt;S×A×O&lt;/script&gt; к предикату в области &lt;script type=&quot;math/tex&quot;&gt;S×A&lt;/script&gt;, но&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Это приведёт к поддержке в коде двух предикатов вместо одного. А в действительности это будет поддержка &lt;script type=&quot;math/tex&quot;&gt;2·n&lt;/script&gt; меньших предикатов вместо &lt;script type=&quot;math/tex&quot;&gt;n&lt;/script&gt;&lt;br /&gt;
(&lt;script type=&quot;math/tex&quot;&gt;\displaystyle\bigvee_{i=1}^{n} {p_{i}(\{s, a\}) ∧ p_i(\{s, a, o\})}&lt;/script&gt; вместо &lt;script type=&quot;math/tex&quot;&gt;\displaystyle\bigvee_{i=1}^{n} p_i(\{s, a, o\})&lt;/script&gt;).&lt;/li&gt;
  &lt;li&gt;На практике я такого не делал, поэтому про подводные камни рассказать не могу.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;определение-действия-1&quot;&gt;Определение действия&lt;/h3&gt;
&lt;p&gt;Тут тоже есть свои особенности в реальных системах.&lt;/p&gt;

&lt;p&gt;Проблема в том, что отображение действия происходит не один раз: сначала внешнее действие отображается на внутреннее на уровне контроллера, потом контроллер отображает это на одно (или несколько) действий модуля бизнес-логики, которые уже отображают свои действия на действия уровня данных или низкоуровневые процедуры (например, печать).&lt;/p&gt;

&lt;p&gt;И тут встаёт проблема выбора уровня отображаемых действий для авторизации.&lt;/p&gt;

&lt;p&gt;Типичные библиотеки для описания авторизации (как минимум &lt;a href=&quot;https://github.com/varvet/pundit&quot;&gt;рельсовые&lt;/a&gt;) переносят это на уровень бизнес-логики (а с active record этот слой ещё и смешан со слоем хранения).&lt;/p&gt;

&lt;p&gt;Я же считаю, что для авторизации нужно использовать отображение как можно более близкое к вводу, потому что&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Отображение уровня контроллера позволяет делать действия бизнес-логики и работы с данными максимально широкими, что уменьшает количество дублируемого кода и позволяет выстроить достаточно высокоуровневые абстракции.&lt;/li&gt;
  &lt;li&gt;В то же время действия уровня контроллера можно делать максимально узкими для построения минимально-необходимого интерфейса (что уменьшает уровень энтропии интерфейса).&lt;/li&gt;
  &lt;li&gt;Авторизация не будет «ломаться», если одно действие уровня контроллера будет отображатся на несколько действий более низкого уровня.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Но в общем и целом, помня про текучие абстрации, можно руководствоваться подходом, при котором предикат будет иметь наименее объёмное определение. В частности иногда есть смысл авторизовать действие на уровне бизнес-логики, а не на уровне контроллера.&lt;/p&gt;

&lt;h3 id=&quot;обратная-авторизация-и-логически-недоступные-действия&quot;&gt;Обратная авторизация и логически недоступные действия&lt;/h3&gt;
&lt;p&gt;Вот сейчас я буду рассказывать про откровенный костыль, но мне пришлось на это пойти.&lt;/p&gt;

&lt;p&gt;Кроме авторизации зачастую встаёт вопрос «обратной авторизации» — когда нужно не ответить отказом/успехом на попытку действия, а предоставить список доступных действий.&lt;/p&gt;

&lt;p&gt;Я использовал такой подход: брал список вообще всех действий и применял к ним предикат с текущими субъектом и объектом.&lt;/p&gt;

&lt;p&gt;Способ полностью работал. Но проблема была в том, что кнопку нужно было задизейблить не только когда пользователю нельзя чего-то сделать, но и когда действие было логически невозможным.&lt;/p&gt;

&lt;p&gt;Тут есть два варианта:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Составить предикат логически недоступных действий и конънктивно применять его вместе с предикатом авторизации.&lt;/li&gt;
  &lt;li&gt;Учесть логическую невозможность действия в авторизации.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Позор мне, я выбрал второй способ. Чреват он двумя выхлопами:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Разделить правила логические и политические в определении предиката невозможно. Это очень плохо.&lt;/li&gt;
  &lt;li&gt;Авторизационный предикат разрастается в объёме на k логических условий для каждого из авторизационных (условий): &lt;script type=&quot;math/tex&quot;&gt;\displaystyle\bigvee_{i=1}^{n} {\displaystyle\bigvee_{j=1}^{k_i} p_{ij}(\{s, a, o\})}&lt;/script&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;заключение&quot;&gt;Заключение&lt;/h2&gt;
&lt;p&gt;Авторизация в простых приложениях — достаточно простой предмет. Основная проблема почти всегда заключается в подходе, а не в теоретической ёмкости проблемы.&lt;/p&gt;

&lt;p&gt;Но при этом многие (в т.ч. и я зачастую) делают авторизацию в MVC-приложениях исходя исключительно из практики, «как получится», что приводит к проблемам гибкости и корректности.&lt;/p&gt;</content><author><name></name></author><summary type="html">Предисловие Как-то давно у моего коллеги всплыл вопрос про организацию авторизации. Вступили мы с ним в диалог, в рамках которого я предложил некоторую теоретическую модель. Относительно недавно мне и самому пришлось делать похожую систему авторизации на проекте, и я взглянул на это всё с практической точки зрения. Посему хочу поделиться с миром читателями самим собой размышлениями на эту тему. Перед прочтением рекомендую ознакомиться с понятием авторизации. Умных книжек на тему авторизации я не читал. Если у вас есть возможность, лучше прочитайте умные книжки, а не этот пост. Подбиваем базу Определимся, какие сущности у нас участвуют в авторизации (т.е. в процессе определения доступа к совершению действия), и как определяется сама авторизация. Система В широком смысле — вся система, с которой производится взаимодействие. В узком смысле — тот модуль, который осуществляет авторизацию. Стоит добавить, что чаще всего реакцией на отрицательный результат авторизации занимается тот же модуль. Но это скорее из-за удобства, потому что в идеале этим должен заниматься модуль ввода-вывода. Модуль ввода-вывода В случае MVC приложений этим модулем будет связка view и controller. К чему нас это приведёт, увидим позже. Субъект Тот, кто совершает операцию. При этом есть внешний субъект — тот самый человек (или не человек), который взаимодействует с системой. Есть внутренний субъект — объект внутри системы, который отвечает за отображение внешнего субъекта. Чаще всего это запись о пользователе. Так как за отображение внешнего субъекта во внутренний отвечает аутентификация, рассматривать этот вопрос в статье не будем, а предположим, что отображение уже совершено (и это всегда так и есть) и под субъектом будем подразумевать внутреннего субъекта. Далее субъект может обозначаться как s (). Действие То, что хочет совершить субъект в системе. Типичное действие в мире веба (и не только) — одна из CRUD-операций. Но, конечно, действия могут быть любыми. Например распечатка документа на принтере. Или запуск ядерной ракеты. Далее действие может обозначаться как a (). Как и субъект, действие внешнее отображается в действие внутрненнее. Объект То, над чем субъект хочет совершить действие. Например, пользователь хочет удалить свой комментарий. В данном случае комментарий — и есть объект. Под объектом () в рамках данной статейки будем понимать объект авторизации. Но тут важно понимать, что объектом авторизации может в разных условиях быть как один объект системы (), так и несколько. Пример с ядерной ракетой: если пользователь хочет запустить ракету с точкой назначения “Вашингтон”, то объектом авторизации может быть как конкретная “ядерная ракета”, так и “Вашингтон”, и даже оба одновременно. При этом объектом авторизации может являться как один объект системы, так и несколько. Но для устранения неоднозначности каждый такой объект авторизации должен содержать уникальный набор объектов системы. То есть объект авторизации является уникальным подмножеством всех объектов системы: Также как и субъекты, объекты рассматриваем только внутренние. Политика (правила) авторизации Политикой или набором правил авторизации будем называть некоторый предикат , на основании которого можно определить, имеет ли возможность субъект совершить действие над объектом. Из указанного определения следует, что областью определения предиката является декартово произведение множеств субъектов, действий и объектов (). Чёрные и белые списки Для большинства этот пункт очевиден, но всё-таки я напишу. Правила могут быть двух видов: разрешающие и запрещающие. Набор разрешающих правил называется «белый список», а набор запрещающих — «чёрный список». Принцип замкнутости в отношении правил Принцип замкнутости для правил политики авторизации можно сформулировать так: «Если для субъекта , действия и объекта не определено значение предиката p, то считаем, что высказывание будет ложным». Этот принцип (или аксиома — как хотите) позволяет не определять правила для всех возможных случаев, а только специфицировать минимально необходимые. Можно сказать (неформально), что исходным высказыванием политики белого списка является «никому ничего нельзя», а правила указывают на исключения, в то время как исходным высказыванием политики чёрного списка является «всем всё можно», а правила указывают на исключения. Во-первых, для устранения неоднозначности следует всегда использовать только один список. В противном случае нарушается принцип замкнутости и нам надо будет писать правила для всех случаев. Такой себе вариант. Во-вторых, исходное высказывание чёрного списка является чрезвычайно опасным, потому что отсутствие а не наличие правила предоставляет доступ к действию. А отсутствие правила контролировать обычно сложнее. Разбиение предиката Так как писать одно большое правило для всего и вся — такая себе затея (ну просто представьте себе этот безумный огромный if), обычно предикат разбивают на несколько меньших объединённых дизъюнкцией: . Выделение групп объектов Так как зачастую объекты системы являются изменяемыми данными, прописывать правило для каждой тройки не представляется возможным. В таком случае предикат политики авторизации описывается с помощью правил, выделяющих подмножество из . Логичнее всего выделять наибольшие подмножества, которые имеют значения с точки зрения бизнеса и для каждого определять меньший предикат: Можно ввести требование, при котором подмножества не должны пересекаться, в таком случае каждый отдельный меньший предикат будет однозначно определять, будет ли конкретный случай разрешён или запрещён: . Общий процесс Определение субъекта Как я уже писал выше, определением (отображением внешнего во внутренний) объекта занимается процесс аутентификации или идентификации. На обе темы написаны не только статьи, а целые книги, разработаны мегатонны технологий (kerberos?, tls?), поэтому эта тема не стала предметом рассмотрения данной статьи. Определение объекта А вот тут даже в общем случае есть что написать. Идентификация Для большинства действий отображение объекта производится по данным, приходящим из системы ввода-вывода. Например, получение поста по его идентификатору: SELECT * FROM posts WHERE id=&amp;amp;post_id. Важно заметить, что отображение происходит не на объект авторизации (потому что внешнего объекта авторизации в явном виде нет), а на объект системы. И уже из объекта системы (или нескольких) определяется объект авторизации. Замена объекта авторизации В качестве сценария для рассмотрения замены объекта авторизации можно рассмотреть добавление объекта, хотя, очевидно, данный подход можно применить для любого класса действия. С добавлением объекта сложность в том, что новый объект ещё не является объектом системы (), поэтому он не входит в область определения предиката авторизации. В таком случае можно рассматривать в качестве объекта авторизации множество или подмножество, которое пользователь хочет изменить. Рассмотрим три случая. Замена на пустое множество. В ряде случаев нет возможности однозначно идентифицировать объект авторизации. Для таких сценариев можно рассматривать множество всех объектов системы () в качестве объекта авторизации, так как действием является расширение этого множества. Но ввиду того, что такие действия де-факто не зависят от , то его () можно заменить на пустое множество. Я бы предложил для такой замены название «нуль-замена». Признаком возможности такой замены является отсутствие идентификационных данных для определения конкретного объекта авторизации. Примером такого сценария является добавление поста. Пользователь либо может добавить пост, либо не может, и это никак не зависит ни от добавляемого поста, ни от других объектов в системе. Класс объектов как объект авторизации Для предыдущего случая можно рассмотреть в качестве объекта авторизации множество постов, если явно обозначен идентификатор этого множества. Тогда для данного действия объектом авторизации будет (). Очевидно, что для данного сценария нуль-замена не требуется. Замена на владельца. Рассмотрим добавление комментария к постам. В этом случае в качестве объекта авторизации выступит множество комментариев к конкретному посту. Но в таком случае, опять же, удобно делать де-факто замену множества комментариев к посту на сам пост как объект авторизации. Подобно предыдущему пункту данная замена противоречит строгой теории, но позволяет сделать правила авторизации () проще и понятнее, а также лучше соответствовать внешним (бизнесовым) правилам. Я бы предложил для такой замены название «замена объектом-владельцем», потому что в данном случае множество определяется через пренадлежность какому-то другому объекту (владельцу). Про каскадную замену объектом-владельцем мне лень писать, честно. Про выбор «нуль-замены» или классов объектов напишу в пункте про определение действия. Групповые действия Зачастую нужно произвести действие сразу с несколькими объектами. В данном случае ответом на групповое действие, очевидно, будет конъюнкция из атомарных действий: . Определение действия В общем случае отображение действия полностью зависит от системы ввода-вывода. Но есть повод рассмотреть определение базового класса объектов для действий. Для действий «добавить комментарий к посту №2», «изменить пост №3», «распечатать отчёт о всех моих постах», «запустить ядерную ракету в направлении Вашингтона» рассмотрим два подхода. «Широкие» действия В таком случае действия могут описываться как «добавить», «изменить», «распечатать», «запустить». А классы объектов системы будут либо выводиться на уровне идентификации, либо поступать в качестве данных. Идентификацируемое подмножества объектов (а не одного) как объекта авторизации я называю базовым классом действия, потому что используемый идентификатор в таких случаях используется для выделения класса объектов из всего множества объектов. Для «широких» действий нет возможности применить «нуль-замену», потому что идентифицируемый объект системы (или базовый класс) (и на основании него определёный объект авторизации) позволяет специфицировать область, на которой определён предикат (или, очевидно, меньший предикат). «Узкие» действия «Узкие» действия описываются как «добавить комментарий к посту», «изменить пост», «распечатать отчёт о всех моих постах», «запустить ракету в направлении города». Очевидно, что в отличии от «широких» действий класс объектов уже включён в само действие, а потому повторное его использование для специфицирования области не требуется, поэтому «нуль-замену» вполне можно и нужно применять. Выбор между узкими и широкими действиями Не смотря на то, что подходы рассмотрены отдельно, в реальных программах предикат может быть одновременно и «узким» и «широким», специфицируя условие и в самом действии и в идентификаторах объектов системы. Применительно к реальному миру Теперь можно поговорить про типичные MVC-web приложения. Тут я буду исходить из модульной rack-/plug-style системы. Чаще всего (хотя можно и по-другому) используется такая схема: А где объект авторизации? Это была первая проблема, с которой я столкнулся, когда понадобилась полноценная система авторизации. Большая часть предлагаемых решений работают на основе предиката вместо . Компенсируется это обычно за счёт использования «узких» действий и исключения объектов авторизации из области определения предиката. Очевидно, что в таком случае нет никакого способа запретить действия, которые действительно зависят от объекта авторизации. Пример: «Пользователи, которые не являются администраторами не имеют права редактировать и удалять не свои посты». Как можно обойтись без объекта авторизации На самом деле можно обойтись без объекта авторизации, перенося политику авторизации на уровень логики приложения. Для указанного выше примера удаление логически делается только среди собственных постов: DELETE FROM posts WHERE author_id=&amp;amp;current_user_id AND id=&amp;amp;post_id. А для администраторов добавляется отдельный доступный только им список постов, где можно делать всё что угодно. Проблемы, как видно из примера, две: Действия приходится делать очень «узкими», чтобы с помощью субъекта и действия можно было как-то ограничивать доступ. Там, где такой способ не позволяет полностью контролировать действие, ограничение переносится на уровень логики работы. И если в первом случае ещё нет явных проблем (хотя архитектура интерфейса страдает), вторая проблема куда хуже. Перенося разграничение прав на уровень логики мы разделяем одно бизнес правило (нельзя/можно что-то делать) на несколько высказываний в коде. Таким образом программист, который откроет оригинальную задачу в трекере и начнёт искать соответствующий код в политиках авторизации может потратить на поиск ответственного участка кода больше времени. Ну и бонусом: пользователь вместо ошибки 403 получит ошибку 404. Хотя чаще всего это не сильно портит проектирование интерфейса. Всё-таки получаем объект авторизации Казалось бы, на схеме всё исправляется просто: Но в действительности теперь надо делать select в не в контроллере, а до него. В модульной системе всё достаточно просто: добавляем перед контроллером и модулем авторизации блок, который предзагружает данные, а затем в контроллере делаем на пару селектов меньше: defmodule App.PostController do use App, :controller plug( App.Plugs.PreloadObject, [function: &amp;amp;__MODULE__.preload_post/2, as: :post] when action in [:show, :update, :delete] ) plug(App.Plugs.Authorization, for: :post) # ... def preload_post(_conn, %{&quot;id&quot; =&amp;gt; id}), do: Posts.get!(id) В данном случае App.Plugs.PreloadObject использует указанную функцию загрузки и складывает объект авторизации в conn, а затем App.Plugs.Authorization на основе этого объекта и правил авторизации определяет, можно ли выполнять действие. Преимущества такого подхода очевидны: Получаем возможность полноценно определить предикат . Ошибки 404 и 403 теперь чётко разграничены. Теперь о недостатках: Теперь контроллер — не единственная точка работы с данными на пути обработки запроса! Если поменяется код работы (в частности select) с постами — надо будет идти потенциально в два места. Теперь при определении полноценного предиката нет возможности проверить доступность до получения объекта. И хотя это — то, к чему мы осознанно шли, в высоконагруженных системах такое поведение может значительно добавить нагрузки в тех сценариях, когда большая часть запросов может быть отвергнута с использованием . Использование полноценного предиката до отображения объекта авторизации Теоретическая возможность сделать двухэтапную авторизацию для высоконагруженных систем есть: достаточно свести предикат в области к предикату в области , но Это приведёт к поддержке в коде двух предикатов вместо одного. А в действительности это будет поддержка меньших предикатов вместо ( вместо ). На практике я такого не делал, поэтому про подводные камни рассказать не могу. Определение действия Тут тоже есть свои особенности в реальных системах. Проблема в том, что отображение действия происходит не один раз: сначала внешнее действие отображается на внутреннее на уровне контроллера, потом контроллер отображает это на одно (или несколько) действий модуля бизнес-логики, которые уже отображают свои действия на действия уровня данных или низкоуровневые процедуры (например, печать). И тут встаёт проблема выбора уровня отображаемых действий для авторизации. Типичные библиотеки для описания авторизации (как минимум рельсовые) переносят это на уровень бизнес-логики (а с active record этот слой ещё и смешан со слоем хранения). Я же считаю, что для авторизации нужно использовать отображение как можно более близкое к вводу, потому что Отображение уровня контроллера позволяет делать действия бизнес-логики и работы с данными максимально широкими, что уменьшает количество дублируемого кода и позволяет выстроить достаточно высокоуровневые абстракции. В то же время действия уровня контроллера можно делать максимально узкими для построения минимально-необходимого интерфейса (что уменьшает уровень энтропии интерфейса). Авторизация не будет «ломаться», если одно действие уровня контроллера будет отображатся на несколько действий более низкого уровня. Но в общем и целом, помня про текучие абстрации, можно руководствоваться подходом, при котором предикат будет иметь наименее объёмное определение. В частности иногда есть смысл авторизовать действие на уровне бизнес-логики, а не на уровне контроллера. Обратная авторизация и логически недоступные действия Вот сейчас я буду рассказывать про откровенный костыль, но мне пришлось на это пойти. Кроме авторизации зачастую встаёт вопрос «обратной авторизации» — когда нужно не ответить отказом/успехом на попытку действия, а предоставить список доступных действий. Я использовал такой подход: брал список вообще всех действий и применял к ним предикат с текущими субъектом и объектом. Способ полностью работал. Но проблема была в том, что кнопку нужно было задизейблить не только когда пользователю нельзя чего-то сделать, но и когда действие было логически невозможным. Тут есть два варианта: Составить предикат логически недоступных действий и конънктивно применять его вместе с предикатом авторизации. Учесть логическую невозможность действия в авторизации. Позор мне, я выбрал второй способ. Чреват он двумя выхлопами: Разделить правила логические и политические в определении предиката невозможно. Это очень плохо. Авторизационный предикат разрастается в объёме на k логических условий для каждого из авторизационных (условий): . Заключение Авторизация в простых приложениях — достаточно простой предмет. Основная проблема почти всегда заключается в подходе, а не в теоретической ёмкости проблемы. Но при этом многие (в т.ч. и я зачастую) делают авторизацию в MVC-приложениях исходя исключительно из практики, «как получится», что приводит к проблемам гибкости и корректности.</summary></entry><entry xml:lang="ru"><title type="html">Презентеры для моделей Ecto</title><link href="https://ivalentinee.github.io/ru/programming/2019/04/30/ecto-presenters.html" rel="alternate" type="text/html" title="Презентеры для моделей Ecto" /><published>2019-04-30T00:00:00+00:00</published><updated>2019-04-30T00:00:00+00:00</updated><id>https://ivalentinee.github.io/ru/programming/2019/04/30/ecto-presenters</id><content type="html" xml:base="https://ivalentinee.github.io/ru/programming/2019/04/30/ecto-presenters.html">&lt;h2 id=&quot;предисловие&quot;&gt;Предисловие&lt;/h2&gt;
&lt;p&gt;Продолжение статьи про &lt;a href=&quot;/ru/programming/2018/11/12/alternative-phoenix-contexts-approach.html&quot;&gt;организацию файлов в типичном Phoenix-проекте&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Время идёт, проекты разрастаются, появляются новые подходы. Расскажу про ещё один.&lt;/p&gt;

&lt;p&gt;Перед прочтением рекомендую ознакомиться с &lt;a href=&quot;/ru/programming/2018/11/12/alternative-phoenix-contexts-approach.html&quot;&gt;предыдущим постом&lt;/a&gt; (но это не обязательно).&lt;/p&gt;

&lt;h2 id=&quot;проблема&quot;&gt;Проблема&lt;/h2&gt;
&lt;p&gt;На написание “презентера” меня побудила следующая проблема: в нескольких разных модулях потребовались одни и те же данные. Но не хранимые в БД, а вычисляемые на основе них.&lt;/p&gt;

&lt;p&gt;В качестве примера возьмём два случая:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Какой-нибудь вычисляемый статус. Допустим, все люди, которые больше 1.8 метров высотой, считаются высокими:
    &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;height&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;180&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;tall&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;short&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Переводы. В поставке Phoenix есть библиотека Gettext, поэтому речь примерно про это:
    &lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;no&quot;&gt;Gettext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dgettext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Gettext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;human&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;куда-этот-код-можно-положить&quot;&gt;Куда этот код можно положить&lt;/h2&gt;
&lt;p&gt;Есть два исходных варианта. И один новый.&lt;/p&gt;

&lt;h3 id=&quot;в-модель-в-понимании-ecto&quot;&gt;В модель (в понимании Ecto)&lt;/h3&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# lib/app/models/human.ex&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Schema&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;humans&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:height&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:gender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Не самый плохой вариант. По крайней мере лучше, чем дублировать эти методы.&lt;/p&gt;

&lt;p&gt;Но в результате:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Модель становится “толстой”&lt;/li&gt;
  &lt;li&gt;Модель отвечает не только за хранение данных&lt;/li&gt;
  &lt;li&gt;Повышается связность в проекте, потому что функции моделей используются ещё и в слое отображения (прямое следствие предыдущего пункта)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;в-контекст&quot;&gt;В контекст&lt;/h3&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# lib/app/contexts/humans.ex&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Contexts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Humans&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Тоже не самый плохой вариант. Уже лучше, чем в модель.&lt;/p&gt;

&lt;p&gt;Но все те же проблемы в результате:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Контекст также как и модель становится “толстым”&lt;/li&gt;
  &lt;li&gt;Контекст отвечает не только за операции (изменение/получение) над данными, но и за вывод&lt;/li&gt;
  &lt;li&gt;Повышается связность в проекте, потому что функции контекстов используются ещё и в слое отображения (прямое следствие предыдущего пункта)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;в-презентер&quot;&gt;В презентер&lt;/h3&gt;
&lt;p&gt;Сразу оговорюсь, что, ввиду отсутствия в erlang/elixir ООП “с классами” презентер (или &lt;em&gt;декоратор&lt;/em&gt;) не использует наследование.
Поэтому всё сильно упрощается:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# lib/app/presenters/human.ex&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Presenters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Human&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;height_status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gender_text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;human&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;И у нас появляется модуль, ответственный за вычисление данных для отображения.&lt;/p&gt;

&lt;p&gt;По привычке называю его “презентер”. И, думаю, это подходящее название.&lt;/p&gt;

&lt;p&gt;Модели и контексты не толстеют, буква &lt;strong&gt;S&lt;/strong&gt; из &lt;a href=&quot;https://ru.wikipedia.org/wiki/SOLID_(%D0%BE%D0%B1%D1%8A%D0%B5%D0%BA%D1%82%D0%BD%D0%BE-%D0%BE%D1%80%D0%B8%D0%B5%D0%BD%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%BD%D0%BE%D0%B5_%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)&quot;&gt;&lt;strong&gt;SOLID&lt;/strong&gt;‘а&lt;/a&gt; соблюдена.&lt;/p&gt;

&lt;h2 id=&quot;немного-про-ограничения-и-антипаттерны&quot;&gt;Немного про ограничения и антипаттерны&lt;/h2&gt;
&lt;p&gt;Ввиду того, что модуль этот был сделан исключительно для отображения, использование его для других целей будет нарушением принципа &lt;strong&gt;SOLID&lt;/strong&gt; (всё ещё первой буквы).&lt;/p&gt;

&lt;p&gt;Поясняю: если презентер по какой-то причине используется в модели или контексте, значит на основе вычисляемых данных будет совершаться получение и/или изменение в БД. Что делает &lt;strong&gt;операции&lt;/strong&gt; зависимыми от &lt;strong&gt;отображения&lt;/strong&gt;. В результате вместе с SOLID’ом есть высокая вероятность нарушения &lt;strong&gt;принципа наименьшего удивления&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Куда девать код, который относится и к отображению и к операциям и к хранению? Не знаю. Ещё не придумал. Но когда-нибудь напишу ответ и на этот вопрос.&lt;/p&gt;</content><author><name></name></author><summary type="html">Предисловие Продолжение статьи про организацию файлов в типичном Phoenix-проекте. Время идёт, проекты разрастаются, появляются новые подходы. Расскажу про ещё один. Перед прочтением рекомендую ознакомиться с предыдущим постом (но это не обязательно). Проблема На написание “презентера” меня побудила следующая проблема: в нескольких разных модулях потребовались одни и те же данные. Но не хранимые в БД, а вычисляемые на основе них. В качестве примера возьмём два случая: Какой-нибудь вычисляемый статус. Допустим, все люди, которые больше 1.8 метров высотой, считаются высокими: def height_status(human) do if human.height &amp;gt; 180, do: &quot;tall&quot;, else: &quot;short&quot; end Переводы. В поставке Phoenix есть библиотека Gettext, поэтому речь примерно про это: def gender_text(human) do Gettext.dgettext(App.Gettext, &quot;human&quot;, human.gender, []) end Куда этот код можно положить Есть два исходных варианта. И один новый. В модель (в понимании Ecto) # lib/app/models/human.ex defmodule App.Models.Human do use Ecto.Schema schema &quot;humans&quot; do field(:height, :string) field(:gender, :string) end # ... def height_status(human) do # ... def gender_text(human) do # ... end Не самый плохой вариант. По крайней мере лучше, чем дублировать эти методы. Но в результате: Модель становится “толстой” Модель отвечает не только за хранение данных Повышается связность в проекте, потому что функции моделей используются ещё и в слое отображения (прямое следствие предыдущего пункта) В контекст # lib/app/contexts/humans.ex defmodule App.Contexts.Humans do def list() do # ... def get() do # ... def create() do # ... def update() do # ... def delete() do # ... def height_status(human) do # ... def gender_text(human) do # ... end Тоже не самый плохой вариант. Уже лучше, чем в модель. Но все те же проблемы в результате: Контекст также как и модель становится “толстым” Контекст отвечает не только за операции (изменение/получение) над данными, но и за вывод Повышается связность в проекте, потому что функции контекстов используются ещё и в слое отображения (прямое следствие предыдущего пункта) В презентер Сразу оговорюсь, что, ввиду отсутствия в erlang/elixir ООП “с классами” презентер (или декоратор) не использует наследование. Поэтому всё сильно упрощается: # lib/app/presenters/human.ex defmodule App.Presenters.Human do def height_status(human) do # ... def gender_text(human) do # ... end И у нас появляется модуль, ответственный за вычисление данных для отображения. По привычке называю его “презентер”. И, думаю, это подходящее название. Модели и контексты не толстеют, буква S из SOLID‘а соблюдена. Немного про ограничения и антипаттерны Ввиду того, что модуль этот был сделан исключительно для отображения, использование его для других целей будет нарушением принципа SOLID (всё ещё первой буквы). Поясняю: если презентер по какой-то причине используется в модели или контексте, значит на основе вычисляемых данных будет совершаться получение и/или изменение в БД. Что делает операции зависимыми от отображения. В результате вместе с SOLID’ом есть высокая вероятность нарушения принципа наименьшего удивления. Куда девать код, который относится и к отображению и к операциям и к хранению? Не знаю. Ещё не придумал. Но когда-нибудь напишу ответ и на этот вопрос.</summary></entry><entry xml:lang="ru"><title type="html">Используем контексты из Phoenix по-другому</title><link href="https://ivalentinee.github.io/ru/programming/2018/11/12/alternative-phoenix-contexts-approach.html" rel="alternate" type="text/html" title="Используем контексты из Phoenix по-другому" /><published>2018-11-12T00:00:00+00:00</published><updated>2018-11-12T00:00:00+00:00</updated><id>https://ivalentinee.github.io/ru/programming/2018/11/12/alternative-phoenix-contexts-approach</id><content type="html" xml:base="https://ivalentinee.github.io/ru/programming/2018/11/12/alternative-phoenix-contexts-approach.html">&lt;h2 id=&quot;предисловие&quot;&gt;Предисловие&lt;/h2&gt;
&lt;p&gt;Обычно в предисловии я рассказываю, что меня привело к появлению текста статьи. Этот раз — не исключение.&lt;/p&gt;

&lt;p&gt;Для тех, кто не знает, что такое &lt;em&gt;контексты&lt;/em&gt; в phoenix, вот &lt;a href=&quot;https://hexdocs.pm/phoenix/contexts.html&quot;&gt;ссылка&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;А побудило меня то, что понадобилось мне в некоторых контекстах использовать одну и ту же модель.&lt;/p&gt;

&lt;p&gt;Оригинал предлагает использовать &lt;code class=&quot;highlighter-rouge&quot;&gt;alias Modulename&lt;/code&gt;. Но выглядит это как костыль. Посему я нашёл свой подход.&lt;/p&gt;

&lt;p&gt;В общем делаем небольшой шаг в сторону &lt;a href=&quot;http://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html&quot;&gt;разделения архитектурных слоёв&lt;/a&gt;. Не то чтобы мы уже там были, но ведь и Рим не один день строился.&lt;/p&gt;

&lt;p&gt;Описаний будет мало. В основном листинги. Сорян, может быть когда-нибудь добавлю подробное описание.&lt;/p&gt;

&lt;h2 id=&quot;верхнеуровнево&quot;&gt;Верхнеуровнево&lt;/h2&gt;
&lt;p&gt;Контексты уезжают в папку &lt;code class=&quot;highlighter-rouge&quot;&gt;contexts&lt;/code&gt;, модели уезжают в папку &lt;code class=&quot;highlighter-rouge&quot;&gt;models&lt;/code&gt;, в ту же папку &lt;code class=&quot;highlighter-rouge&quot;&gt;models&lt;/code&gt; складываем всё, что связано с &lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.Query&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Это слишком коротко, поэтому сейчас я начну &lt;del&gt;пояснять подробнее&lt;/del&gt; приводить примеры.&lt;/p&gt;

&lt;h2 id=&quot;увозим-модели-в-models&quot;&gt;Увозим модели в &lt;code class=&quot;highlighter-rouge&quot;&gt;models&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Пожалуй, самый важный пункт. Остальное — следствия.&lt;/p&gt;

&lt;p&gt;Под моделями в данном случае подразумеваются файлы, содержащие &lt;strong&gt;схемы данных&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;Ecto.Schema&lt;/code&gt;) и &lt;strong&gt;changeset’ы&lt;/strong&gt;:&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# lib/my_app/models/pizza.ex&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Pizza&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Schema&lt;/span&gt;

  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Changeset&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;schema&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;pizzas&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;field&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:discounted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:boolean&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;timestamps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;changeset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;validate_required&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Такой переезд позволяет нам выделить слой работы с хранилищем данных (то есть описания, требуемые для ORM). И заодно решает проблему использования одной модели в нескольких контекстах.&lt;/p&gt;

&lt;h2 id=&quot;создаём-файл-для-функций-выборки&quot;&gt;Создаём файл для функций выборки&lt;/h2&gt;
&lt;p&gt;Раз уж увозим &lt;strong&gt;слой хранения&lt;/strong&gt;, то увозим его полностью:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# lib/my_app/models/pizza/query.ex&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Pizza&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Query&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;warn:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Query&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discounted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;where:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discounted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;non_discounted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;where:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discounted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;q&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;order_by:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;desc:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;q&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;тут-же-про-changesetы&quot;&gt;Тут же про changeset’ы&lt;/h3&gt;
&lt;p&gt;Changeset’ы тоже можно увезти в отдельный файл (или даже несколько), чтобы не засорять файл со схемой. Например в &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/my_app/models/pizza/changesets.ex&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;используем-это-всё-в-контексте&quot;&gt;Используем это всё в контексте&lt;/h2&gt;
&lt;p&gt;Контексты же уезжают в свою отдельную папку, формируя слой &lt;em&gt;обработки данных&lt;/em&gt;. Назвать это &lt;em&gt;бизнес-логикой&lt;/em&gt; у меня &lt;del&gt;язык&lt;/del&gt; клавиатура &lt;del&gt;не поворачивается&lt;/del&gt; не даёт.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# lib/my_app/contexts/pizzas.ex&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Contexts&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Pizzas&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;warn:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;kn&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Ecto&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Query&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Pizza&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Models&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Pizza&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Query&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;MyApp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;discounted?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pizza&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;!!pizza&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;discounted&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;list_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Pizza&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get_by!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clauses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Pizza&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_by!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;clauses&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;changeset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pizza&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changeset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Pizza&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{},&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changeset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(%&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Pizza&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pizza&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pizza&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pizza&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;changeset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;defp&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list_query&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Pizza&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Query&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;by_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;вместо-выводов&quot;&gt;Вместо выводов&lt;/h2&gt;
&lt;p&gt;На этот раз без выводов. Сами решайте, нужно вам это, или нет. Но мне стало удобнее.&lt;/p&gt;</content><author><name></name></author><summary type="html">Предисловие Обычно в предисловии я рассказываю, что меня привело к появлению текста статьи. Этот раз — не исключение. Для тех, кто не знает, что такое контексты в phoenix, вот ссылка. А побудило меня то, что понадобилось мне в некоторых контекстах использовать одну и ту же модель. Оригинал предлагает использовать alias Modulename. Но выглядит это как костыль. Посему я нашёл свой подход. В общем делаем небольшой шаг в сторону разделения архитектурных слоёв. Не то чтобы мы уже там были, но ведь и Рим не один день строился. Описаний будет мало. В основном листинги. Сорян, может быть когда-нибудь добавлю подробное описание. Верхнеуровнево Контексты уезжают в папку contexts, модели уезжают в папку models, в ту же папку models складываем всё, что связано с Ecto.Query. Это слишком коротко, поэтому сейчас я начну пояснять подробнее приводить примеры. Увозим модели в models Пожалуй, самый важный пункт. Остальное — следствия. Под моделями в данном случае подразумеваются файлы, содержащие схемы данных (Ecto.Schema) и changeset’ы: # lib/my_app/models/pizza.ex defmodule MyApp.Models.Pizza do use Ecto.Schema import Ecto.Changeset schema &quot;pizzas&quot; do field(:name, :string) field(:description, :string) field(:description, :string) field(:discounted, :boolean) timestamps() end def changeset(struct, params) do struct |&amp;gt; cast(attrs, [:name, :description]) |&amp;gt; validate_required([:name]) end end Такой переезд позволяет нам выделить слой работы с хранилищем данных (то есть описания, требуемые для ORM). И заодно решает проблему использования одной модели в нескольких контекстах. Создаём файл для функций выборки Раз уж увозим слой хранения, то увозим его полностью: # lib/my_app/models/pizza/query.ex defmodule MyApp.Models.Pizza.Query do import Ecto.Query, warn: false require Ecto.Query def discounted(query) do from(q in query, where: discounted == true) end def non_discounted(query) do from(q in query, where: discounted != true) end def by_id(query) do from(q in query, order_by: [desc: q.id]) end end Тут же про changeset’ы Changeset’ы тоже можно увезти в отдельный файл (или даже несколько), чтобы не засорять файл со схемой. Например в lib/my_app/models/pizza/changesets.ex. Используем это всё в контексте Контексты же уезжают в свою отдельную папку, формируя слой обработки данных. Назвать это бизнес-логикой у меня язык клавиатура не поворачивается не даёт. # lib/my_app/contexts/pizzas.ex defmodule MyApp.Contexts.Pizzas do import Ecto.Query, warn: false require Ecto.Query alias MyApp.Models.Pizza alias MyApp.Models.Pizza.Query alias MyApp.Repo def discounted?(pizza), do: !!pizza.discounted def list do list_query() |&amp;gt; Repo.all() end def get!(id) do Pizza |&amp;gt; Repo.get!(id) end def get_by!(clauses) do Pizza |&amp;gt; Repo.get_by!(clauses) end def create(params) do changeset = Pizza.changeset(%Pizza{}, params) Repo.insert(changeset) end def update(%Pizza{} = pizza, params) do pizza |&amp;gt; Pizza.changeset(params) |&amp;gt; Repo.update() end defp list_query do Pizza |&amp;gt; Query.by_id() end end Вместо выводов На этот раз без выводов. Сами решайте, нужно вам это, или нет. Но мне стало удобнее.</summary></entry><entry xml:lang="en"><title type="html">Hacking OpenAPI</title><link href="https://ivalentinee.github.io/en/programming/2018/09/27/hacking-openapi.html" rel="alternate" type="text/html" title="Hacking OpenAPI" /><published>2018-09-27T00:00:00+00:00</published><updated>2018-09-27T00:00:00+00:00</updated><id>https://ivalentinee.github.io/en/programming/2018/09/27/hacking-openapi</id><content type="html" xml:base="https://ivalentinee.github.io/en/programming/2018/09/27/hacking-openapi.html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Back in the days I used &lt;a href=&quot;http://apidocjs.com/&quot;&gt;apiDoc&lt;/a&gt;. Wonderful tool. But growing project caused apiDoc to fail.&lt;/p&gt;

&lt;p&gt;When time has come to look for something else there were two options: &lt;a href=&quot;https://apiblueprint.org/&quot;&gt;API Blueprint&lt;/a&gt; and &lt;a href=&quot;https://www.openapis.org/&quot;&gt;OpenAPI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Spent some time (about 4 hour) failing to make API Blueprint work with deepObject parameters I went with the only option left — mysterious OpenAPI.&lt;/p&gt;

&lt;h2 id=&quot;sample-data-model-and-api&quot;&gt;Sample data model and API&lt;/h2&gt;
&lt;p&gt;To demonstrate canonical OpenAPI approach problem I need to describe some model and few API methods on it.
I’ll take online-store product as an example.&lt;/p&gt;

&lt;h3 id=&quot;data-model&quot;&gt;Data model&lt;/h3&gt;
&lt;p&gt;Attributes (there might be more, but that’s enough):&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Name (string) — &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Description (string) — &lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Vendor code (number) — &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor_code&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Picture (file) — &lt;code class=&quot;highlighter-rouge&quot;&gt;picture&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s describe canonical &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#schemaObject&quot;&gt;OpenAPI scheme&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;schemas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Product&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Name&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Description&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;vendor_code&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;number&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Vendor code&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;picture&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;binary&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Picture&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;http-api&quot;&gt;HTTP API&lt;/h3&gt;
&lt;p&gt;We need to describe two &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#pathItemObject&quot;&gt;API-methods&lt;/a&gt;: “create” and “get”.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt; method will look like this:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;/api/products&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Create product&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;requestBody&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;multipart/form-data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product&quot;&lt;/span&gt;

      &lt;span class=&quot;na&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;200'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And &lt;strong&gt;get&lt;/strong&gt; method will look like this:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;/api/products/{id}&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Get product&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;id&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;query&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Product ID&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;200'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;$ref&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Seems legit? Well, yes, but no.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/other/posts/2018-09-27-hacking-openapi/broken-api.html&quot;&gt;Broken API Example&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;whats-wrong&quot;&gt;What’s wrong?&lt;/h2&gt;
&lt;p&gt;In real world scenario no one is going to build an API that consumes file as binary date (as part of &lt;code class=&quot;highlighter-rouge&quot;&gt;multipart/form-data&lt;/code&gt;) and returns file as binary date (as part of &lt;code class=&quot;highlighter-rouge&quot;&gt;application/json&lt;/code&gt;).
Response will most probably look like:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;picture&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Picture&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;File url&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;File name&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;In terms of OpenAPI it means, that producer is not equal to consumer. So we can’t use the same schema for both. Is there any thing we can do?&lt;/p&gt;

&lt;p&gt;In the world of ponies and rainbows we’ll be able to describe a model and then cut/amend it however we need. But not only it’s unsupported (&lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/issues/674&quot;&gt;such merge won’t ever be part of standard&lt;/a&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;allOf&lt;/code&gt; is both &lt;a href=&quot;https://github.com/swagger-api/swagger-ui/issues/3674&quot;&gt;broken&lt;/a&gt; and not meant for amending but combination), it’s also dangerous, because no one can guess how base model changes will affect derived model.&lt;/p&gt;

&lt;h3 id=&quot;dont-use-common-schemas&quot;&gt;Don’t use common schemas&lt;/h3&gt;
&lt;p&gt;And just write full descriptions at every place.&lt;/p&gt;

&lt;p&gt;But that’s going to be hell of a duplication. And, considering how redundant OpenAPI description is, the documentat is going to be huge. Impractically huge.&lt;/p&gt;

&lt;h3 id=&quot;take-common-descriptions-to-the-upper-level&quot;&gt;Take common descriptions to the upper level&lt;/h3&gt;
&lt;p&gt;I’m not talking about files, but abstraction level.&lt;/p&gt;

&lt;p&gt;Common descriptions are &lt;em&gt;property&lt;/em&gt; descriptions. And that’s what we’re going to take from method descriptions somewhere else.&lt;/p&gt;

&lt;p&gt;OpenAPI does not specify what exact schemas we &lt;del&gt;must&lt;/del&gt; should describe, so describing subschemas should be easy.&lt;/p&gt;

&lt;p&gt;Then we’ll describe final schemas inside methods, but use property refs instead of full property descriptions.&lt;/p&gt;

&lt;h2 id=&quot;hacked-api&quot;&gt;«Hacked» API&lt;/h2&gt;
&lt;h3 id=&quot;model-properties-description&quot;&gt;Model properties description:&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;schemas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;Product::name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Name&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;Product::description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Description&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;Product::vendor_code&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;number&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Vendor code&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;Product::picture&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Picture&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;File url&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;File name&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;Product::picture::upload&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;binary&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Picture&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;use-property-descriptions-in-methods&quot;&gt;Use property descriptions in methods&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Create&lt;/strong&gt; will now look like this:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;/api/products&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Create product&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;requestBody&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;multipart/form-data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product::name&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product::description&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;vendor_code&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product::vendor_code&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;picture&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product::picture::upload&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;200'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And &lt;strong&gt;get&lt;/strong&gt; will now look like this::&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;/api/products/{id}&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Get product&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;id&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;query&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Product ID&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;200'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product::name&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product::description&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;vendor_code&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product::vendor_code&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;picture&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product::picture&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/other/posts/2018-09-27-hacking-openapi/hacked-api.html&quot;&gt;Hacked API example&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;some-sort-of-conclusion&quot;&gt;Some sort of conclusion&lt;/h3&gt;
&lt;p&gt;That way of describing is closer to real life actually.&lt;/p&gt;

&lt;p&gt;One rarely write the same code to consume and to render data. But properties (even within code) are often the same (types and descriptions), except files (and alike).&lt;/p&gt;

&lt;h2 id=&quot;some-additional-shitty-code&quot;&gt;Some additional shitty code&lt;/h2&gt;
&lt;p&gt;The other OpenAPI problem is this: descriptions can only be in one file. I can understand why they (OpenAPI authors) did it but it’s not that convenient.&lt;/p&gt;

&lt;p&gt;It’s easy to fix: parse all files, merge and render into a single file.&lt;/p&gt;

&lt;p&gt;It happend so that &lt;a href=&quot;https://github.com/ivalentinee/openapi-merger&quot;&gt;I already built such tool&lt;/a&gt;. Not sure if it works :)&lt;/p&gt;</content><author><name></name></author><summary type="html">Introduction Back in the days I used apiDoc. Wonderful tool. But growing project caused apiDoc to fail. When time has come to look for something else there were two options: API Blueprint and OpenAPI. Spent some time (about 4 hour) failing to make API Blueprint work with deepObject parameters I went with the only option left — mysterious OpenAPI. Sample data model and API To demonstrate canonical OpenAPI approach problem I need to describe some model and few API methods on it. I’ll take online-store product as an example. Data model Attributes (there might be more, but that’s enough): Name (string) — name Description (string) — description Vendor code (number) — vendor_code Picture (file) — picture Let’s describe canonical OpenAPI scheme: components: schemas: Product: type: object description: Product properties: name: type: string description: Name description: type: string description: Description vendor_code: type: number description: Vendor code picture: type: string format: binary description: Picture HTTP API We need to describe two API-methods: “create” and “get”. Create method will look like this: paths: /api/products: post: summary: Create product requestBody: required: true content: multipart/form-data: schema: &quot;$ref&quot;: &quot;#/components/schemas/Product&quot; responses: '200': # ... And get method will look like this: paths: /api/products/{id}: get: summary: Get product parameters: - name: id in: query description: Product ID schema: type: string responses: '200': content: application/json: schema: $ref: &quot;#/components/schemas/Product&quot; Seems legit? Well, yes, but no. Broken API Example What’s wrong? In real world scenario no one is going to build an API that consumes file as binary date (as part of multipart/form-data) and returns file as binary date (as part of application/json). Response will most probably look like: picture: type: object description: Picture properties: link: type: string description: File url filename: type: string description: File name In terms of OpenAPI it means, that producer is not equal to consumer. So we can’t use the same schema for both. Is there any thing we can do? In the world of ponies and rainbows we’ll be able to describe a model and then cut/amend it however we need. But not only it’s unsupported (such merge won’t ever be part of standard and allOf is both broken and not meant for amending but combination), it’s also dangerous, because no one can guess how base model changes will affect derived model. Don’t use common schemas And just write full descriptions at every place. But that’s going to be hell of a duplication. And, considering how redundant OpenAPI description is, the documentat is going to be huge. Impractically huge. Take common descriptions to the upper level I’m not talking about files, but abstraction level. Common descriptions are property descriptions. And that’s what we’re going to take from method descriptions somewhere else. OpenAPI does not specify what exact schemas we must should describe, so describing subschemas should be easy. Then we’ll describe final schemas inside methods, but use property refs instead of full property descriptions. «Hacked» API Model properties description: components: schemas: Product::name: type: string description: Name Product::description: type: string description: Description Product::vendor_code: type: number description: Vendor code Product::picture: type: object description: Picture properties: link: type: string description: File url filename: type: string description: File name Product::picture::upload: type: string format: binary description: Picture Use property descriptions in methods Create will now look like this: paths: /api/products: post: summary: Create product requestBody: required: true content: multipart/form-data: schema: type: object properties: name: {&quot;$ref&quot;: &quot;#/components/schemas/Product::name&quot;} description: {&quot;$ref&quot;: &quot;#/components/schemas/Product::description&quot;} vendor_code: {&quot;$ref&quot;: &quot;#/components/schemas/Product::vendor_code&quot;} picture: {&quot;$ref&quot;: &quot;#/components/schemas/Product::picture::upload&quot;} responses: '200': # ... And get will now look like this:: paths: /api/products/{id}: get: summary: Get product parameters: - name: id in: query description: Product ID schema: type: string responses: '200': content: application/json: schema: type: object properties: name: {&quot;$ref&quot;: &quot;#/components/schemas/Product::name&quot;} description: {&quot;$ref&quot;: &quot;#/components/schemas/Product::description&quot;} vendor_code: {&quot;$ref&quot;: &quot;#/components/schemas/Product::vendor_code&quot;} picture: {&quot;$ref&quot;: &quot;#/components/schemas/Product::picture&quot;} Hacked API example Some sort of conclusion That way of describing is closer to real life actually. One rarely write the same code to consume and to render data. But properties (even within code) are often the same (types and descriptions), except files (and alike). Some additional shitty code The other OpenAPI problem is this: descriptions can only be in one file. I can understand why they (OpenAPI authors) did it but it’s not that convenient. It’s easy to fix: parse all files, merge and render into a single file. It happend so that I already built such tool. Not sure if it works :)</summary></entry><entry xml:lang="ru"><title type="html">Хачим OpenAPI</title><link href="https://ivalentinee.github.io/ru/programming/2018/09/27/hacking-openapi.html" rel="alternate" type="text/html" title="Хачим OpenAPI" /><published>2018-09-27T00:00:00+00:00</published><updated>2018-09-27T00:00:00+00:00</updated><id>https://ivalentinee.github.io/ru/programming/2018/09/27/hacking-openapi</id><content type="html" xml:base="https://ivalentinee.github.io/ru/programming/2018/09/27/hacking-openapi.html">&lt;h2 id=&quot;предисловие&quot;&gt;Предисловие&lt;/h2&gt;
&lt;p&gt;Так исторически сложилось, что я на проектах пользовался &lt;a href=&quot;http://apidocjs.com/&quot;&gt;apiDoc’м&lt;/a&gt;. Прекрасный инструмент. Но, увы, при росте размеров и количества HTTP API он (apiDoc) всё хуже справлялся.&lt;/p&gt;

&lt;p&gt;Когда пришло время выбирать новый инструмент, выбор, по сути, свёлся к двум &lt;del&gt;стульям&lt;/del&gt; вариантам: &lt;a href=&quot;https://apiblueprint.org/&quot;&gt;API Blueprint&lt;/a&gt; и &lt;a href=&quot;https://www.openapis.org/&quot;&gt;OpenAPI&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Продолбавшись с API Blueprint часа 4 и так и не заставив его нормально работать с deepObject-параметрами строки запроса, остался только туманный OpenAPI.&lt;/p&gt;

&lt;h2 id=&quot;предполагаемая-модель-данных-и-api&quot;&gt;Предполагаемая модель данных и API&lt;/h2&gt;
&lt;p&gt;Для демонстрации того, что поломало мне пропагандируемый OpenAPI-документацией подход, необходимо обозначить некоторую модель и пару методов API для работы с ней
Пусть это будет товар в интернет-магазине.&lt;/p&gt;

&lt;h3 id=&quot;модель-данных&quot;&gt;Модель данных&lt;/h3&gt;
&lt;p&gt;Атрибутами (их было бы больше, но для примера хватит этих) будут:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Название (строка) — &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Описание (строка) — &lt;code class=&quot;highlighter-rouge&quot;&gt;description&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Артикул (число) — &lt;code class=&quot;highlighter-rouge&quot;&gt;vendor_code&lt;/code&gt; (Шоколад не виноват, гугель-транслейт так перевёл)&lt;/li&gt;
  &lt;li&gt;Картинка (файл) — &lt;code class=&quot;highlighter-rouge&quot;&gt;picture&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Составим канонiчную &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#schemaObject&quot;&gt;OpenAPI-схему&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;schemas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;Product&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Продукт&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Название товара&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Описание товара&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;vendor_code&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;number&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Артикул&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;picture&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;binary&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Изображение&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;http-api&quot;&gt;HTTP API&lt;/h3&gt;
&lt;p&gt;Тут нам понадобится описание двух &lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#pathItemObject&quot;&gt;методов&lt;/a&gt;: создания и получения.&lt;/p&gt;

&lt;p&gt;Ввиду наличия картинки метод &lt;strong&gt;создания&lt;/strong&gt; гипотетически будет описываться примерно так:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;/api/products&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Создание продукта&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;requestBody&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;multipart/form-data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product&quot;&lt;/span&gt;

      &lt;span class=&quot;na&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;200'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;А метод &lt;strong&gt;получения&lt;/strong&gt; гипотетически будет описываться примерно так:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;/api/products/{id}&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Получение проекта&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;id&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;query&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Идентификатор продукта&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;200'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;s&quot;&gt;$ref&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Всё правильно? Да нет, не очень.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/other/posts/2018-09-27-hacking-openapi/broken-api.html&quot;&gt;Пример сломанного API&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;а-что-собственно-сломалось-то&quot;&gt;А что, собственно, сломалось-то?&lt;/h2&gt;
&lt;p&gt;На деле никто не будет делать API, которое получает файл бинарником (в составе &lt;code class=&quot;highlighter-rouge&quot;&gt;multipart/form-data&lt;/code&gt;), и отдавать бинарником (в составе &lt;code class=&quot;highlighter-rouge&quot;&gt;application/json&lt;/code&gt;).
Скорее всего ответ будет в виде:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;picture&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Изображение&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ссылка на файл&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Имя файла&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;То есть, в терминологии OpenAPI producer (производитель) не равен cunsumer’у (потребителю). А это значит, что использовать одну и ту же схему не получится. Как быть?&lt;/p&gt;

&lt;p&gt;В идеальном мире можно было бы описать модель, а потом сокращать/дополнять её до нужного нам состояния. Однако такой метод мало того, что не поддерживается (&lt;a href=&quot;https://github.com/OAI/OpenAPI-Specification/issues/674&quot;&gt;merge в стандарт не включат&lt;/a&gt;, а &lt;code class=&quot;highlighter-rouge&quot;&gt;allOf&lt;/code&gt; не только &lt;a href=&quot;https://github.com/swagger-api/swagger-ui/issues/3674&quot;&gt;сломан&lt;/a&gt;, но и создан не столько для сращивания схем, сколько для объединения), так ещё и опасен, потому что изменения исходной модели неизвестно как скажутся на производной модели.&lt;/p&gt;

&lt;h3 id=&quot;забить-на-вынесение-схемы&quot;&gt;Забить на вынесение схемы&lt;/h3&gt;
&lt;p&gt;И просто везде писать всё целиком.&lt;/p&gt;

&lt;p&gt;Но это будет лютое дублирование. А учитывая то, как многословно (я бы даже сказал “многострочо”) описание в OpenAPI, это приведёт к огромному файлу. Нецелесообразно огромному.&lt;/p&gt;

&lt;h3 id=&quot;вынести-общее-описание-на-уровень-выше&quot;&gt;Вынести общее описание на уровень выше&lt;/h3&gt;
&lt;p&gt;Ну я не про yaml-файлы сейчас, а про уровень абстракции.&lt;/p&gt;

&lt;p&gt;А общими являются описания отдельных полей (не всех, но почти). Их и будем выносить из описания методов.&lt;/p&gt;

&lt;p&gt;Ввиду того, что OpenAPI явно не указывает, какие именно схемы мы &lt;del&gt;должны&lt;/del&gt; можем описывать, сделать это для подсхем это достаточно легко.&lt;/p&gt;

&lt;p&gt;После чего в описании методов будем всё-таки писать схему, но не целиком описывать модель, а только перечислять нужные свойства.&lt;/p&gt;

&lt;h2 id=&quot;похаченное-api&quot;&gt;«Похаченное» API&lt;/h2&gt;
&lt;h3 id=&quot;описываем-свойства-модели&quot;&gt;Описываем свойства модели&lt;/h3&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;components&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;schemas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;Product::name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Название товара&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;Product::description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Описание товара&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;Product::vendor_code&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;number&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Артикул&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;Product::picture&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Изображение&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ссылка на файл&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Имя файла&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;Product::picture::upload&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;binary&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Изображение&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h3 id=&quot;используем-их-в-схемах-методов&quot;&gt;Используем их в схемах методов&lt;/h3&gt;
&lt;p&gt;Метод &lt;strong&gt;создания&lt;/strong&gt; теперь выглядит так:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;/api/products&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Создание продукта&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;requestBody&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;required&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;multipart/form-data&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product::name&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product::description&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;vendor_code&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product::vendor_code&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;picture&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product::picture::upload&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;200'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;А метод &lt;strong&gt;получения&lt;/strong&gt; теперь выглядит так:&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;/api/products/{id}&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;summary&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Получение проекта&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;id&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;in&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;query&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Идентификатор продукта&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;string&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;responses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;200'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;na&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;application/json&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
              &lt;span class=&quot;na&quot;&gt;schema&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;object&lt;/span&gt;
                &lt;span class=&quot;na&quot;&gt;properties&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product::name&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product::description&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;vendor_code&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product::vendor_code&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
                  &lt;span class=&quot;na&quot;&gt;picture&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;$ref&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;#/components/schemas/Product::picture&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/other/posts/2018-09-27-hacking-openapi/hacked-api.html&quot;&gt;Пример похаченного API&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;немного-выводов&quot;&gt;Немного выводов&lt;/h3&gt;
&lt;p&gt;Такое описание, по сути, отображает реальное положение дел.&lt;/p&gt;

&lt;p&gt;Мало кто пишет один и тот же код как для получения данных, так и для их отображения. Однако общими для них (в коде) являются поля (их типы и описания). Ну кроме случая с файлами (и подобные).&lt;/p&gt;

&lt;h2 id=&quot;авторский-говнокод&quot;&gt;Авторский говнокод&lt;/h2&gt;
&lt;p&gt;Ещё одна крохотная проблема исходного OpenAPI заключается в том, что описание нельзя разбить на несколько файлов. Что, конечно, можно понять, но на практике — крайне неудобное ограничение.&lt;/p&gt;

&lt;p&gt;Проблема решается в пару строк кода: парсим все файлы, мержим, рендерим в один файл.&lt;/p&gt;

&lt;p&gt;Так случилось, что &lt;a href=&quot;https://github.com/ivalentinee/openapi-merger&quot;&gt;подобное решение я уже написал&lt;/a&gt;. Не ручаюсь за его работоспособность :)&lt;/p&gt;</content><author><name></name></author><summary type="html">Предисловие Так исторически сложилось, что я на проектах пользовался apiDoc’м. Прекрасный инструмент. Но, увы, при росте размеров и количества HTTP API он (apiDoc) всё хуже справлялся. Когда пришло время выбирать новый инструмент, выбор, по сути, свёлся к двум стульям вариантам: API Blueprint и OpenAPI. Продолбавшись с API Blueprint часа 4 и так и не заставив его нормально работать с deepObject-параметрами строки запроса, остался только туманный OpenAPI. Предполагаемая модель данных и API Для демонстрации того, что поломало мне пропагандируемый OpenAPI-документацией подход, необходимо обозначить некоторую модель и пару методов API для работы с ней Пусть это будет товар в интернет-магазине. Модель данных Атрибутами (их было бы больше, но для примера хватит этих) будут: Название (строка) — name Описание (строка) — description Артикул (число) — vendor_code (Шоколад не виноват, гугель-транслейт так перевёл) Картинка (файл) — picture Составим канонiчную OpenAPI-схему: components: schemas: Product: type: object description: Продукт properties: name: type: string description: Название товара description: type: string description: Описание товара vendor_code: type: number description: Артикул picture: type: string format: binary description: Изображение HTTP API Тут нам понадобится описание двух методов: создания и получения. Ввиду наличия картинки метод создания гипотетически будет описываться примерно так: paths: /api/products: post: summary: Создание продукта requestBody: required: true content: multipart/form-data: schema: &quot;$ref&quot;: &quot;#/components/schemas/Product&quot; responses: '200': # ... А метод получения гипотетически будет описываться примерно так: paths: /api/products/{id}: get: summary: Получение проекта parameters: - name: id in: query description: Идентификатор продукта schema: type: string responses: '200': content: application/json: schema: $ref: &quot;#/components/schemas/Product&quot; Всё правильно? Да нет, не очень. Пример сломанного API А что, собственно, сломалось-то? На деле никто не будет делать API, которое получает файл бинарником (в составе multipart/form-data), и отдавать бинарником (в составе application/json). Скорее всего ответ будет в виде: picture: type: object description: Изображение properties: link: type: string description: Ссылка на файл filename: type: string description: Имя файла То есть, в терминологии OpenAPI producer (производитель) не равен cunsumer’у (потребителю). А это значит, что использовать одну и ту же схему не получится. Как быть? В идеальном мире можно было бы описать модель, а потом сокращать/дополнять её до нужного нам состояния. Однако такой метод мало того, что не поддерживается (merge в стандарт не включат, а allOf не только сломан, но и создан не столько для сращивания схем, сколько для объединения), так ещё и опасен, потому что изменения исходной модели неизвестно как скажутся на производной модели. Забить на вынесение схемы И просто везде писать всё целиком. Но это будет лютое дублирование. А учитывая то, как многословно (я бы даже сказал “многострочо”) описание в OpenAPI, это приведёт к огромному файлу. Нецелесообразно огромному. Вынести общее описание на уровень выше Ну я не про yaml-файлы сейчас, а про уровень абстракции. А общими являются описания отдельных полей (не всех, но почти). Их и будем выносить из описания методов. Ввиду того, что OpenAPI явно не указывает, какие именно схемы мы должны можем описывать, сделать это для подсхем это достаточно легко. После чего в описании методов будем всё-таки писать схему, но не целиком описывать модель, а только перечислять нужные свойства. «Похаченное» API Описываем свойства модели components: schemas: Product::name: type: string description: Название товара Product::description: type: string description: Описание товара Product::vendor_code: type: number description: Артикул Product::picture: type: object description: Изображение properties: link: type: string description: Ссылка на файл filename: type: string description: Имя файла Product::picture::upload: type: string format: binary description: Изображение Используем их в схемах методов Метод создания теперь выглядит так: paths: /api/products: post: summary: Создание продукта requestBody: required: true content: multipart/form-data: schema: type: object properties: name: {&quot;$ref&quot;: &quot;#/components/schemas/Product::name&quot;} description: {&quot;$ref&quot;: &quot;#/components/schemas/Product::description&quot;} vendor_code: {&quot;$ref&quot;: &quot;#/components/schemas/Product::vendor_code&quot;} picture: {&quot;$ref&quot;: &quot;#/components/schemas/Product::picture::upload&quot;} responses: '200': # ... А метод получения теперь выглядит так: paths: /api/products/{id}: get: summary: Получение проекта parameters: - name: id in: query description: Идентификатор продукта schema: type: string responses: '200': content: application/json: schema: type: object properties: name: {&quot;$ref&quot;: &quot;#/components/schemas/Product::name&quot;} description: {&quot;$ref&quot;: &quot;#/components/schemas/Product::description&quot;} vendor_code: {&quot;$ref&quot;: &quot;#/components/schemas/Product::vendor_code&quot;} picture: {&quot;$ref&quot;: &quot;#/components/schemas/Product::picture&quot;} Пример похаченного API Немного выводов Такое описание, по сути, отображает реальное положение дел. Мало кто пишет один и тот же код как для получения данных, так и для их отображения. Однако общими для них (в коде) являются поля (их типы и описания). Ну кроме случая с файлами (и подобные). Авторский говнокод Ещё одна крохотная проблема исходного OpenAPI заключается в том, что описание нельзя разбить на несколько файлов. Что, конечно, можно понять, но на практике — крайне неудобное ограничение. Проблема решается в пару строк кода: парсим все файлы, мержим, рендерим в один файл. Так случилось, что подобное решение я уже написал. Не ручаюсь за его работоспособность :)</summary></entry><entry xml:lang="ru"><title type="html">Как засунуть pg_data-бекап в docker-контейнер</title><link href="https://ivalentinee.github.io/ru/programming/2018/08/17/put-pg-data-to-docker-container.html" rel="alternate" type="text/html" title="Как засунуть pg_data-бекап в docker-контейнер" /><published>2018-08-17T00:00:00+00:00</published><updated>2018-08-17T00:00:00+00:00</updated><id>https://ivalentinee.github.io/ru/programming/2018/08/17/put-pg-data-to-docker-container</id><content type="html" xml:base="https://ivalentinee.github.io/ru/programming/2018/08/17/put-pg-data-to-docker-container.html">&lt;h2 id=&quot;предисловие&quot;&gt;Предисловие&lt;/h2&gt;
&lt;p&gt;Этот пост написан скорее для меня самого, чем для случайно забредших сюда.&lt;/p&gt;

&lt;p&gt;Иногда админы, которых попросили скинуть бекап с какого-нибудь стенда, радостно кидают архивчик и говорят: “Сделано”. А в архиве вместо православного pg_dump’а лежит богомерзкая папка pg_data.&lt;/p&gt;

&lt;p&gt;Но проблема в том, что накатывание этого даже без докера не всегда удобно. Благо что базёна при dockerway-разработке всего одна на инстанс pg, поэтому разбираться с внутренним устройством pg_data не приходится.&lt;/p&gt;

&lt;h2 id=&quot;накатываем&quot;&gt;Накатываем&lt;/h2&gt;

&lt;h3 id=&quot;ищем-куда-копировать&quot;&gt;Ищем, куда копировать&lt;/h3&gt;
&lt;p&gt;Я при разработке использую &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;docker-compose&lt;/a&gt;, поэтому плясать буду от него.&lt;/p&gt;

&lt;p&gt;Для начала получаем ID нужного контейнера. Допустим, в docker-compose.yml он у меня назван &lt;code class=&quot;highlighter-rouge&quot;&gt;postgres&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker-compose ps &lt;span class=&quot;nt&quot;&gt;-q&lt;/span&gt; postgres
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Далее для полученного ID надо получить путь до &lt;a href=&quot;https://docs.docker.com/storage/volumes/&quot;&gt;volume’а&lt;/a&gt;, в котором хранится pg_data:&lt;/p&gt;

&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker inspect &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{{ .Mounts }}'&lt;/span&gt; &amp;lt;id контейнера&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Получаем что-то вроде&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[{volume ea8997003c8f70cb8590754b882f644ad4a29c9bdd2074c4799e150a99d5eada /var/lib/docker/volumes/ea8997003c8f70cb8590754b882f644ad4a29c9bdd2074c4799e150a99d5eada/_data /var/lib/postgresql/data local rw true }]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;где&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/var/lib/docker/volumes/ea8997003c8f70cb8590754b882f644ad4a29c9bdd2074c4799e150a99d5eada/_data
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;— наше искомое значение.&lt;/p&gt;

&lt;h3 id=&quot;копируем-и-накатываем-права&quot;&gt;Копируем и накатываем права&lt;/h3&gt;
&lt;p&gt;Перед процедурой желательно тормознуть все контейнеры:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker-compose stop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Для полученной директории с pg_data:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;копируем куда-нибудь действующие конфиги &lt;code class=&quot;highlighter-rouge&quot;&gt;postgresql.conf&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_hba.conf&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;удаляем всё содержимое папки&lt;/li&gt;
  &lt;li&gt;копируем полное содержимое pg_data из архива&lt;/li&gt;
  &lt;li&gt;заменяем конфиги &lt;code class=&quot;highlighter-rouge&quot;&gt;postgresql.conf&lt;/code&gt; и &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_hba.conf&lt;/code&gt; теми, что мы сохранили в первом пункте.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;На всякий случай регулярка для &lt;code class=&quot;highlighter-rouge&quot;&gt;pg_hba.conf&lt;/code&gt; чтобы всё разрешить:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/md5&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;reject&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;trust&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;gss&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\|&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sspi/trust/g&quot;&lt;/span&gt; &amp;lt;путь до pg_data&amp;gt;/pg_hba.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Так как на стенде имя БД и права скорее всего не совпадают с локальными, надо будет заходить и править это дело руками. Для этого стартуем контейнер с БД и меняем все нужные права/названия. Например:&lt;/p&gt;
&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker-compose start postgres
&lt;span class=&quot;gp&quot;&gt;$&lt;/span&gt; docker-compose &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;postgres bash
&lt;span class=&quot;gp&quot;&gt;#&lt;/span&gt; psql &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; postgres
&lt;span class=&quot;gp&quot;&gt;postgres-#&lt;/span&gt; ALTER USER postgres PASSWORD null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;postgres-#&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\l&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;postgres-#&lt;/span&gt; ALTER DATABASE &amp;lt;продовое название БД&amp;gt; RENAME TO &amp;lt;локальное название БД&amp;gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;postgres-#&lt;/span&gt; ALTER DATABASE &amp;lt;локальное название БД&amp;gt; OWNER TO postgres&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Готово! Вы восхитительны!&lt;/p&gt;</content><author><name></name></author><summary type="html">Предисловие Этот пост написан скорее для меня самого, чем для случайно забредших сюда. Иногда админы, которых попросили скинуть бекап с какого-нибудь стенда, радостно кидают архивчик и говорят: “Сделано”. А в архиве вместо православного pg_dump’а лежит богомерзкая папка pg_data. Но проблема в том, что накатывание этого даже без докера не всегда удобно. Благо что базёна при dockerway-разработке всего одна на инстанс pg, поэтому разбираться с внутренним устройством pg_data не приходится. Накатываем Ищем, куда копировать Я при разработке использую docker-compose, поэтому плясать буду от него. Для начала получаем ID нужного контейнера. Допустим, в docker-compose.yml он у меня назван postgres: $ docker-compose ps -q postgres Далее для полученного ID надо получить путь до volume’а, в котором хранится pg_data: $ docker inspect -f '{{ .Mounts }}' &amp;lt;id контейнера&amp;gt; Получаем что-то вроде [{volume ea8997003c8f70cb8590754b882f644ad4a29c9bdd2074c4799e150a99d5eada /var/lib/docker/volumes/ea8997003c8f70cb8590754b882f644ad4a29c9bdd2074c4799e150a99d5eada/_data /var/lib/postgresql/data local rw true }] где /var/lib/docker/volumes/ea8997003c8f70cb8590754b882f644ad4a29c9bdd2074c4799e150a99d5eada/_data — наше искомое значение. Копируем и накатываем права Перед процедурой желательно тормознуть все контейнеры: $ docker-compose stop Для полученной директории с pg_data: копируем куда-нибудь действующие конфиги postgresql.conf и pg_hba.conf удаляем всё содержимое папки копируем полное содержимое pg_data из архива заменяем конфиги postgresql.conf и pg_hba.conf теми, что мы сохранили в первом пункте. На всякий случай регулярка для pg_hba.conf чтобы всё разрешить: # sed -i &quot;s/md5\|reject\|trust\|password\|gss\|sspi/trust/g&quot; &amp;lt;путь до pg_data&amp;gt;/pg_hba.conf Так как на стенде имя БД и права скорее всего не совпадают с локальными, надо будет заходить и править это дело руками. Для этого стартуем контейнер с БД и меняем все нужные права/названия. Например: $ docker-compose start postgres $ docker-compose exec postgres bash # psql -U postgres postgres-# ALTER USER postgres PASSWORD null; postgres-# \l postgres-# ALTER DATABASE &amp;lt;продовое название БД&amp;gt; RENAME TO &amp;lt;локальное название БД&amp;gt;; postgres-# ALTER DATABASE &amp;lt;локальное название БД&amp;gt; OWNER TO postgres; Готово! Вы восхитительны!</summary></entry><entry xml:lang="ru"><title type="html">Получение stacktrace’а в elixir’е</title><link href="https://ivalentinee.github.io/ru/programming/2018/06/27/elixir-trace.html" rel="alternate" type="text/html" title="Получение stacktrace'а в elixir'е" /><published>2018-06-27T00:00:00+00:00</published><updated>2018-06-27T00:00:00+00:00</updated><id>https://ivalentinee.github.io/ru/programming/2018/06/27/elixir-trace</id><content type="html" xml:base="https://ivalentinee.github.io/ru/programming/2018/06/27/elixir-trace.html">&lt;h2 id=&quot;предисловие&quot;&gt;Предисловие&lt;/h2&gt;
&lt;p&gt;Этот пост написан скорее для меня самого, чем для случайно забредших сюда.&lt;/p&gt;

&lt;p&gt;Был однажды случай в моей жизни, когда beam-нода грохалась при выполнении определённого набора действий. При этом понять, в какой точке происходило падение было невозможно, потому что грохалось где-то в глубинах даже не elixir’ового кода, а &lt;a href=&quot;https://github.com/Vagabond/gen_smtp&quot;&gt;какой-то erlang-библиотеки&lt;/a&gt;. То есть отдебажить “комментированием кода” точно не получилось бы.&lt;/p&gt;

&lt;h2 id=&quot;предупреждение&quot;&gt;Предупреждение&lt;/h2&gt;
&lt;p&gt;В эрланге я разбираюсь также хорошо, как ES6-писатели в жабаскрипте. То есть примерно никак. Поэтому предостерегаю: в этом посте может содержаться полнейший бред.&lt;/p&gt;

&lt;h2 id=&quot;получение-трейса&quot;&gt;Получение трейса&lt;/h2&gt;

&lt;h3 id=&quot;strace&quot;&gt;strace&lt;/h3&gt;
&lt;p&gt;Сначала, конечно, был просмотрен &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt; на наличие подозрительных операций. Но, как вы понимаете, &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt; для кода с сильным параллелизмом не выдаст ничего понятного. Куча строк про всякие мьютексы, туда-сюда, треды, вот это вот всё. Ну и я не настолько &lt;code class=&quot;highlighter-rouge&quot;&gt;strace&lt;/code&gt;-мастер, чтобы его разбирать руками за доли секунд.&lt;/p&gt;

&lt;p&gt;А проблема была при отправке писем, что характерно.&lt;/p&gt;

&lt;h3 id=&quot;crashdump-viewer&quot;&gt;Crashdump viewer&lt;/h3&gt;
&lt;p&gt;Есть в эрланге &lt;a href=&quot;http://erlang.org/doc/apps/observer/crashdump_ug.html&quot;&gt;Crashdump viewer&lt;/a&gt;. Но, цитирую: “The Crashdump Viewer is a &lt;strong&gt;WxWidgets&lt;/strong&gt; based tool”. Ага. Конечно. В &lt;a href=&quot;https://www.openshift.com/&quot;&gt;шифте&lt;/a&gt;, который анально огорожен. Я смогу стартануть WxWidgets-приложение (или выкинуть наружу tcp). Ну-ну.&lt;/p&gt;

&lt;h3 id=&quot;эликсировый-трейс&quot;&gt;Эликсировый трейс&lt;/h3&gt;
&lt;p&gt;Было решено найти способ вытащить трейс вызовов beam-машины (то есть erlang’а).&lt;/p&gt;

&lt;p&gt;К сожалению, вытащить трейс вызовов после выполнения кода (как делает, если я не ошибаюсь, &lt;a href=&quot;http://erlang.org/doc/man/dbg.html#tracer-0&quot;&gt;эрланговый дебагер&lt;/a&gt;) было весьма затруднительно, потому что до вызова дебагера не доходило ввиду падения ноды.&lt;/p&gt;

&lt;p&gt;Пришлось искать средства вывода трейса в момент выполнения.&lt;/p&gt;

&lt;p&gt;К счастью, в erlang’е для этого &lt;a href=&quot;http://erlang.org/doc/man/erlang.html#trace-3&quot;&gt;средства есть&lt;/a&gt; (хоть и весьма своеобразные).&lt;/p&gt;

&lt;p&gt;Огромное спасибо автору &lt;a href=&quot;https://gist.github.com/id/cba5dbf7653d7eab6a03&quot;&gt;вот этого гиста&lt;/a&gt;. Он спас мне очень много времени копания в документации.&lt;/p&gt;

&lt;p&gt;В результате код, который печатает трейс во время выполнения в файл получился примерно такой (elixir, но старался юзать эрланговые функции):&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;print_trace&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;receive&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;:io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;call: (tracer pid: ~p)~n ~p~n&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;print_trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/tmp/trace.out&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;custom_tracer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:proc_lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;spawn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;print_trace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;print_trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;ss&quot;&gt;:erlang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;trace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tracer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;custom_tracer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Пояснять код не буду — разбирайтесь сами.&lt;/p&gt;

&lt;h2 id=&quot;заключение&quot;&gt;Заключение&lt;/h2&gt;
&lt;p&gt;Вывод трейса на самом деле ничем не помог — пришлось выпиливать отправку файлов из письма.&lt;/p&gt;

&lt;p&gt;Но зато я насмотрелся на то, как со стороны эрланга выглядит elixir. Забавно выглядит, на самом деле.&lt;/p&gt;</content><author><name></name></author><summary type="html">Предисловие Этот пост написан скорее для меня самого, чем для случайно забредших сюда. Был однажды случай в моей жизни, когда beam-нода грохалась при выполнении определённого набора действий. При этом понять, в какой точке происходило падение было невозможно, потому что грохалось где-то в глубинах даже не elixir’ового кода, а какой-то erlang-библиотеки. То есть отдебажить “комментированием кода” точно не получилось бы. Предупреждение В эрланге я разбираюсь также хорошо, как ES6-писатели в жабаскрипте. То есть примерно никак. Поэтому предостерегаю: в этом посте может содержаться полнейший бред. Получение трейса strace Сначала, конечно, был просмотрен strace на наличие подозрительных операций. Но, как вы понимаете, strace для кода с сильным параллелизмом не выдаст ничего понятного. Куча строк про всякие мьютексы, туда-сюда, треды, вот это вот всё. Ну и я не настолько strace-мастер, чтобы его разбирать руками за доли секунд. А проблема была при отправке писем, что характерно. Crashdump viewer Есть в эрланге Crashdump viewer. Но, цитирую: “The Crashdump Viewer is a WxWidgets based tool”. Ага. Конечно. В шифте, который анально огорожен. Я смогу стартануть WxWidgets-приложение (или выкинуть наружу tcp). Ну-ну. Эликсировый трейс Было решено найти способ вытащить трейс вызовов beam-машины (то есть erlang’а). К сожалению, вытащить трейс вызовов после выполнения кода (как делает, если я не ошибаюсь, эрланговый дебагер) было весьма затруднительно, потому что до вызова дебагера не доходило ввиду падения ноды. Пришлось искать средства вывода трейса в момент выполнения. К счастью, в erlang’е для этого средства есть (хоть и весьма своеобразные). Огромное спасибо автору вот этого гиста. Он спас мне очень много времени копания в документации. В результате код, который печатает трейс во время выполнения в файл получился примерно такой (elixir, но старался юзать эрланговые функции): print_trace = fn(print_trace, fd) -&amp;gt; receive do msg -&amp;gt; :io.format(fd, &quot;call: (tracer pid: ~p)~n ~p~n&quot;, [self(), msg]) print_trace.(print_trace, fd) end end {ok, fd} = :file.open(&quot;/tmp/trace.out&quot;, [:write]) custom_tracer = :proc_lib.spawn(fn -&amp;gt; print_trace.(print_trace, fd) end) :erlang.trace(self(), true, [:all, {:tracer, custom_tracer}]) Пояснять код не буду — разбирайтесь сами. Заключение Вывод трейса на самом деле ничем не помог — пришлось выпиливать отправку файлов из письма. Но зато я насмотрелся на то, как со стороны эрланга выглядит elixir. Забавно выглядит, на самом деле.</summary></entry><entry xml:lang="ru"><title type="html">Авторизация, аутентификация и идентификация</title><link href="https://ivalentinee.github.io/ru/programming/2018/06/26/authorization-authentication-and-identification.html" rel="alternate" type="text/html" title="Авторизация, аутентификация и идентификация" /><published>2018-06-26T00:00:00+00:00</published><updated>2018-06-26T00:00:00+00:00</updated><id>https://ivalentinee.github.io/ru/programming/2018/06/26/authorization-authentication-and-identification</id><content type="html" xml:base="https://ivalentinee.github.io/ru/programming/2018/06/26/authorization-authentication-and-identification.html">&lt;h2 id=&quot;предисловие&quot;&gt;Предисловие&lt;/h2&gt;
&lt;p&gt;Ох, благодатный пост. Как же у меня горит от тех людей, которые не понимают разницу. А ведь всё очень просто! Давайте разберёмся.&lt;/p&gt;

&lt;p&gt;На самом деле чтобы разобраться, достаточно быть хорошо знакомым с этими словами в Английском языке. Но, раз я пишу для русскоязычной аудитории, то поясню в подробностях.&lt;/p&gt;

&lt;h2 id=&quot;идентификация&quot;&gt;Идентификация&lt;/h2&gt;
&lt;p&gt;По-английски будет “identification”. Это &lt;strong&gt;процесс&lt;/strong&gt; определения &lt;strong&gt;идентичности&lt;/strong&gt; или &lt;strong&gt;индивидуальности&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Что это значит для нас, простых &lt;del&gt;студентов филфака МГУ&lt;/del&gt; программистов?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Идентичность&lt;/strong&gt; и &lt;strong&gt;индивидуальность&lt;/strong&gt; объекта позволяют нам отличить этот объект от любых других.&lt;/p&gt;

&lt;p&gt;Например, есть десять экзаменационных листов. Сами по себе листы одинаковые, распечатаны на одном принтере в одно и то же время. Что может их отличать? Например, номер (если такой на листе есть). Или, если по номеру &lt;strong&gt;идентифицировать&lt;/strong&gt; лист мы не можем, то имя и фамилия экзаменующегося (написанные на этом листе) могут служить &lt;strong&gt;идентификационными данными&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Другой пример. Группа анонимных &lt;del&gt;фронтендеров&lt;/del&gt; алкоголиков. На встрече такой группы каждый называет какое-то имя (не обязательно при этом совпадающее с паспортным). В этой группе все будут друг друга &lt;strong&gt;различать&lt;/strong&gt; по этим именам. Ну, там, Вася, Петя, Крис, Дэвид.&lt;/p&gt;

&lt;p&gt;Живой пример из мира IT: идентификатор сессии google analytics. При попадании любого браузера в поле действия google analytics этому браузеру назначается &lt;strong&gt;идентификатор&lt;/strong&gt;, по которому этот браузер будет на стороне GA &lt;strong&gt;отличаться&lt;/strong&gt; от миллиардов других.&lt;/p&gt;

&lt;h2 id=&quot;аутентификация&quot;&gt;Аутентификация&lt;/h2&gt;
&lt;p&gt;По-английски будет “authentication”. Это &lt;strong&gt;процесс&lt;/strong&gt; определения &lt;strong&gt;аутентичности&lt;/strong&gt; или &lt;strong&gt;подлинности&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;С объяснением &lt;strong&gt;аутентичности&lt;/strong&gt; уже посложнее, чем с &lt;em&gt;идентичностью&lt;/em&gt;. &lt;strong&gt;Определение подлинности&lt;/strong&gt; позволяет нам определить (ух, какой у меня красивый слог-то, а), что какой-то объект является тем, за кого он себя выдаёт.&lt;/p&gt;

&lt;p&gt;Всё тот же пример с экзаменационными листами. Как нам подтвердить, что лист, на коротом написано “Крис Маккорд” действительно заполнен Крисом? Мне известен только один способ: экспертиза почерка. Если почерк на этом листе полностью соответствует почерку Криса, то этот лист действительно заполнил он, а не кто-то другой.&lt;/p&gt;

&lt;p&gt;Другой пример. Группа (не)анонимных &lt;del&gt;алкоголиков&lt;/del&gt; фронтендеров. Как мы можем утверждать, что пришедший на встречу человек является Дэном Абрамовым (а вот этот весёлый парень в кепке представился именно им)? Например, проверить его паспорт. И если там написано “Дэн Абрамов” (ну и совпадают серия, номер, что там ещё), то этот человек в кепке — точно Дэн Абрамов.&lt;/p&gt;

&lt;p&gt;Живой пример из мира IT: пароль и логин на форме входа в google account. Если логин является открытой информацией, то пароль — закрытой. И только тот, кто создавал аккаунт, знает этот самый пароль. С помощью пароля он подтверждает свою &lt;strong&gt;аутентичность&lt;/strong&gt; как владельца аккаунта.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://ru.wikipedia.org/wiki/%D0%A6%D0%B8%D1%84%D1%80%D0%BE%D0%B2%D0%BE%D0%B9_%D1%81%D0%B5%D1%80%D1%82%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%82&quot;&gt;Куда более интересная для изучения аутентификация, например&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;разница-между-идентификацией-и-аутентификацией&quot;&gt;Разница между идентификацией и аутентификацией&lt;/h2&gt;
&lt;p&gt;Если непонятно, чем отличается идентификация от аутентификации, то я попробую в этом пункте разъяснить.&lt;/p&gt;

&lt;p&gt;Идентификационные данные доступны всем, и зачастую не принадлежат ни каким образом объекту идентификации. Например, все знают, что меня зовут &lt;a href=&quot;https://ivalentinee.github.io/about&quot;&gt;Валентин&lt;/a&gt;. Все могут меня различать по моей внешности и/или имени.&lt;/p&gt;

&lt;p&gt;Аутентификационные данные же доступны только объекту аутентификации. Например, только у меня есть мой паспорт. Только у меня есть мой рисунок сетчатки глаза и отпечатки пальцев. Никто, кроме меня, не может предоставить эти данные аутентифицирующему субъекту. Именно по причине доступности только мне по этим данным меня и аутентифицируют.&lt;/p&gt;

&lt;p&gt;Являются ли аутентификационные данные идентификационными? Да. Если мы можем проверить аутентичность (оригинальность), то мы можем проверить и идентичность (индивидуальность). Но у вас в базе всё равно же есть &lt;code class=&quot;highlighter-rouge&quot;&gt;user_id&lt;/code&gt;, так что зачем светить везде пароль =)&lt;/p&gt;

&lt;h2 id=&quot;авторизация&quot;&gt;Авторизация&lt;/h2&gt;
&lt;p&gt;Вот если с разницей идентификации и аутентификации вопрос достаточно тонкий, то не различать аутентификацию и авторизацию — моветон. Я бы даже сказал, что это — грех для тех, кто работает в области IT.&lt;/p&gt;

&lt;p&gt;Что же такое авторизация?&lt;/p&gt;

&lt;p&gt;Обратимся к английскому варианту — “authorization”, однокоренным словом которого является “authority” — “власть” или “полномочие”.&lt;/p&gt;

&lt;p&gt;То есть “авторизация” — процесс определения полномочий объекта.&lt;/p&gt;

&lt;p&gt;“Могу ли я узнать состояние счёта в банке Валентина — могу”, — вот типичный процесс &lt;strong&gt;авторизации&lt;/strong&gt;. А вот на вопрос “а действительно ли я тот самый Валентин” будет отвечать уже &lt;strong&gt;аутентфикация&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Пример с экзаменационными листами. Кто имеет право проверять экзаменационные листы? Только учитель (ну или проверяющий в случае ЕГЭ).&lt;/p&gt;

&lt;p&gt;Другой пример. Кто имеет право отправлять коммиты в репозиторий группы (не)анонимных &lt;del&gt;алкоголиков&lt;/del&gt; фронтендеров? Только владелец соответствующего аккаунта на гитхабе.&lt;/p&gt;

&lt;p&gt;Живой пример из мира IT: может ли пользователь с ролью “редактор” удалить запись другого пользователя с ролью “редактор”? Нет. Это может сделать только пользователь с ролью “администратор”.&lt;/p&gt;

&lt;h2 id=&quot;заключение&quot;&gt;Заключение&lt;/h2&gt;
&lt;p&gt;Я считаю, что всё это нужно хорошо понимать как &lt;del&gt;говнокодерам&lt;/del&gt; инженерам, так и &lt;del&gt;фронтендерам&lt;/del&gt; людям, не пишущим код. Чтобы при возникновении проблем в &lt;strong&gt;идентификации&lt;/strong&gt;, &lt;strong&gt;аутентификации&lt;/strong&gt; и &lt;strong&gt;авторизации&lt;/strong&gt; общение происходило на одном языке, понятном всем.&lt;/p&gt;

&lt;p&gt;Поэтому пройдусь по списку ещё раз:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Идентификация отвечает на вопрос “кто это такой?”&lt;/li&gt;
  &lt;li&gt;Аутентификация отвечает на вопрос “он точно тот, за кого себя выдаёт?”&lt;/li&gt;
  &lt;li&gt;Авторизация отвечает на вопрос “что ему позволено делать?”&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Предисловие Ох, благодатный пост. Как же у меня горит от тех людей, которые не понимают разницу. А ведь всё очень просто! Давайте разберёмся. На самом деле чтобы разобраться, достаточно быть хорошо знакомым с этими словами в Английском языке. Но, раз я пишу для русскоязычной аудитории, то поясню в подробностях. Идентификация По-английски будет “identification”. Это процесс определения идентичности или индивидуальности. Что это значит для нас, простых студентов филфака МГУ программистов? Идентичность и индивидуальность объекта позволяют нам отличить этот объект от любых других. Например, есть десять экзаменационных листов. Сами по себе листы одинаковые, распечатаны на одном принтере в одно и то же время. Что может их отличать? Например, номер (если такой на листе есть). Или, если по номеру идентифицировать лист мы не можем, то имя и фамилия экзаменующегося (написанные на этом листе) могут служить идентификационными данными. Другой пример. Группа анонимных фронтендеров алкоголиков. На встрече такой группы каждый называет какое-то имя (не обязательно при этом совпадающее с паспортным). В этой группе все будут друг друга различать по этим именам. Ну, там, Вася, Петя, Крис, Дэвид. Живой пример из мира IT: идентификатор сессии google analytics. При попадании любого браузера в поле действия google analytics этому браузеру назначается идентификатор, по которому этот браузер будет на стороне GA отличаться от миллиардов других. Аутентификация По-английски будет “authentication”. Это процесс определения аутентичности или подлинности. С объяснением аутентичности уже посложнее, чем с идентичностью. Определение подлинности позволяет нам определить (ух, какой у меня красивый слог-то, а), что какой-то объект является тем, за кого он себя выдаёт. Всё тот же пример с экзаменационными листами. Как нам подтвердить, что лист, на коротом написано “Крис Маккорд” действительно заполнен Крисом? Мне известен только один способ: экспертиза почерка. Если почерк на этом листе полностью соответствует почерку Криса, то этот лист действительно заполнил он, а не кто-то другой. Другой пример. Группа (не)анонимных алкоголиков фронтендеров. Как мы можем утверждать, что пришедший на встречу человек является Дэном Абрамовым (а вот этот весёлый парень в кепке представился именно им)? Например, проверить его паспорт. И если там написано “Дэн Абрамов” (ну и совпадают серия, номер, что там ещё), то этот человек в кепке — точно Дэн Абрамов. Живой пример из мира IT: пароль и логин на форме входа в google account. Если логин является открытой информацией, то пароль — закрытой. И только тот, кто создавал аккаунт, знает этот самый пароль. С помощью пароля он подтверждает свою аутентичность как владельца аккаунта. Куда более интересная для изучения аутентификация, например. Разница между идентификацией и аутентификацией Если непонятно, чем отличается идентификация от аутентификации, то я попробую в этом пункте разъяснить. Идентификационные данные доступны всем, и зачастую не принадлежат ни каким образом объекту идентификации. Например, все знают, что меня зовут Валентин. Все могут меня различать по моей внешности и/или имени. Аутентификационные данные же доступны только объекту аутентификации. Например, только у меня есть мой паспорт. Только у меня есть мой рисунок сетчатки глаза и отпечатки пальцев. Никто, кроме меня, не может предоставить эти данные аутентифицирующему субъекту. Именно по причине доступности только мне по этим данным меня и аутентифицируют. Являются ли аутентификационные данные идентификационными? Да. Если мы можем проверить аутентичность (оригинальность), то мы можем проверить и идентичность (индивидуальность). Но у вас в базе всё равно же есть user_id, так что зачем светить везде пароль =) Авторизация Вот если с разницей идентификации и аутентификации вопрос достаточно тонкий, то не различать аутентификацию и авторизацию — моветон. Я бы даже сказал, что это — грех для тех, кто работает в области IT. Что же такое авторизация? Обратимся к английскому варианту — “authorization”, однокоренным словом которого является “authority” — “власть” или “полномочие”. То есть “авторизация” — процесс определения полномочий объекта. “Могу ли я узнать состояние счёта в банке Валентина — могу”, — вот типичный процесс авторизации. А вот на вопрос “а действительно ли я тот самый Валентин” будет отвечать уже аутентфикация. Пример с экзаменационными листами. Кто имеет право проверять экзаменационные листы? Только учитель (ну или проверяющий в случае ЕГЭ). Другой пример. Кто имеет право отправлять коммиты в репозиторий группы (не)анонимных алкоголиков фронтендеров? Только владелец соответствующего аккаунта на гитхабе. Живой пример из мира IT: может ли пользователь с ролью “редактор” удалить запись другого пользователя с ролью “редактор”? Нет. Это может сделать только пользователь с ролью “администратор”. Заключение Я считаю, что всё это нужно хорошо понимать как говнокодерам инженерам, так и фронтендерам людям, не пишущим код. Чтобы при возникновении проблем в идентификации, аутентификации и авторизации общение происходило на одном языке, понятном всем. Поэтому пройдусь по списку ещё раз: Идентификация отвечает на вопрос “кто это такой?” Аутентификация отвечает на вопрос “он точно тот, за кого себя выдаёт?” Авторизация отвечает на вопрос “что ему позволено делать?”</summary></entry><entry xml:lang="ru"><title type="html">Конфигурация elixir-приложений</title><link href="https://ivalentinee.github.io/ru/programming/2018/06/26/elixir-application-configuration.html" rel="alternate" type="text/html" title="Конфигурация elixir-приложений" /><published>2018-06-26T00:00:00+00:00</published><updated>2018-06-26T00:00:00+00:00</updated><id>https://ivalentinee.github.io/ru/programming/2018/06/26/elixir-application-configuration</id><content type="html" xml:base="https://ivalentinee.github.io/ru/programming/2018/06/26/elixir-application-configuration.html">&lt;h2 id=&quot;предисловие&quot;&gt;Предисловие&lt;/h2&gt;
&lt;p&gt;На этот очевидный пост меня побудили люди, которые перешли из мира интерпретируемых языков, но так и не поняли, куда они попали.&lt;/p&gt;

&lt;h2 id=&quot;в-чём-проблема-то&quot;&gt;В чём проблема-то?&lt;/h2&gt;
&lt;p&gt;А проблема в том, что elixir — язык компилируемый. Поэтому писать в &lt;code class=&quot;highlighter-rouge&quot;&gt;config.exs&lt;/code&gt; выражение &lt;code class=&quot;highlighter-rouge&quot;&gt;System.get_env&lt;/code&gt; — полнейшая глупость.&lt;/p&gt;

&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hello_project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;some_super_configurable_value:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;SOME_SUPER_CONFIGURABLE_VALUE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;или&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:hello_project&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;ss&quot;&gt;some_super_configurable_value:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;SOME_SUPER_CONFIGURABLE_VALUE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;some default value&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Вот такой код я зачастую вижу от недавних рельсоделов.&lt;/p&gt;

&lt;p&gt;К чему это приведёт? А вот к чему.&lt;/p&gt;

&lt;h2 id=&quot;компилируемый-конфиг&quot;&gt;Компилируемый конфиг&lt;/h2&gt;
&lt;p&gt;Конфиг, что характерно, &lt;strong&gt;тоже скомпилируется&lt;/strong&gt;. А это значит, что код &lt;code class=&quot;highlighter-rouge&quot;&gt;System.get_env&lt;/code&gt; выполнится во время компиляции. И в конфигурацию попадёт значение из &lt;strong&gt;окружения сборки приложения&lt;/strong&gt;, а не &lt;strong&gt;исполнения&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;кулхак-для-обхода-ситуации&quot;&gt;Кулхак для обхода ситуации&lt;/h2&gt;
&lt;p&gt;Сообщество elixir-программистов нашло выход. Выход не в виде переделывания сборки языка, а в виде соглашения.&lt;/p&gt;

&lt;p&gt;Для динамического (времени исполнения программы, а не времени компиляции) чтения переменных окружения принято писать в конфиг значение &lt;code class=&quot;highlighter-rouge&quot;&gt;{:system, &quot;SOME_VARIABLE_NAME&quot;}&lt;/code&gt;, где &lt;code class=&quot;highlighter-rouge&quot;&gt;SOME_VARIABLE_NAME&lt;/code&gt; — имя переменной окружения.&lt;/p&gt;

&lt;p&gt;Но просто так это не сработает. Нужно, чтобы читающий код умел такие случаи обрабатывать.&lt;/p&gt;

&lt;p&gt;Вот пример кода обработчика:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;defmodule&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ReadConfig&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:system&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;environment_variable_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment_variable_name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Соответственно, значение получаем в коде не так:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:my_application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:my_configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;а так:&lt;/p&gt;
&lt;div class=&quot;language-elixir highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;no&quot;&gt;ReadConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:my_application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:my_configuration&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;(Приведённый код является условным и намеренно ухудшеным/упрощённым)&lt;/p&gt;

&lt;h2 id=&quot;а-теперь-про-библиотеки&quot;&gt;А теперь про библиотеки&lt;/h2&gt;
&lt;p&gt;И вот тут начинается самое интересное. Для того, чтобы это всё работало не только в вашем коде, но и в библиотечном, нужно, чтобы библиотека поддерживала такое же чтение конфига для &lt;code class=&quot;highlighter-rouge&quot;&gt;{:system, &quot;SOME_VAR_NAME&quot;}&lt;/code&gt;. С этим, на самом деле, всё не очень хорошо.&lt;/p&gt;

&lt;p&gt;Пример из phoenix, который мне много чего сломал:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;url: [host: {:system, &quot;HOST&quot;}, port: {:system, &quot;PORT&quot;}, scheme: &quot;http&quot;],
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;А если я хочу крутить протоколом доступа из переменных окружения? А вот нельзя. Пиши руками в конфиге. Или пиши в &lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;prod&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt; конфиги отдельно. Стыд-то какой! Поменял протокол — собирай и деплой приложение. И не важно, что https терминируется за 3-4 узла до elixir-части, а тут он только для генерации ссылок написан. Эх, Крис, зачем так-то?&lt;/p&gt;

&lt;p&gt;Примеров полно. Как хороших библиотек, так и не очень.&lt;/p&gt;

&lt;p&gt;Отсюда &lt;strong&gt;вывод такой&lt;/strong&gt;: если будете писать свой пакет в экосистеме elixir, то, пожалуйста, пишите его с учётом динамической конфигурации &lt;strong&gt;всего, что вообще конфигурируется&lt;/strong&gt;. Это спасёт многих разработчиков от истерики и костылей.&lt;/p&gt;

&lt;h2 id=&quot;вместо-заключения&quot;&gt;Вместо заключения&lt;/h2&gt;
&lt;p&gt;Я думал, что описанное мной выше (про компилируемость языка) является очевидным. Но по какой-то причине бывшие рельсоделы не могут это понять. А жаль.&lt;/p&gt;</content><author><name></name></author><summary type="html">Предисловие На этот очевидный пост меня побудили люди, которые перешли из мира интерпретируемых языков, но так и не поняли, куда они попали. В чём проблема-то? А проблема в том, что elixir — язык компилируемый. Поэтому писать в config.exs выражение System.get_env — полнейшая глупость. config :hello_project, some_super_configurable_value: System.get_env(&quot;SOME_SUPER_CONFIGURABLE_VALUE&quot;) или config :hello_project, some_super_configurable_value: System.get_env(&quot;SOME_SUPER_CONFIGURABLE_VALUE&quot;) || &quot;some default value&quot; Вот такой код я зачастую вижу от недавних рельсоделов. К чему это приведёт? А вот к чему. Компилируемый конфиг Конфиг, что характерно, тоже скомпилируется. А это значит, что код System.get_env выполнится во время компиляции. И в конфигурацию попадёт значение из окружения сборки приложения, а не исполнения. Кулхак для обхода ситуации Сообщество elixir-программистов нашло выход. Выход не в виде переделывания сборки языка, а в виде соглашения. Для динамического (времени исполнения программы, а не времени компиляции) чтения переменных окружения принято писать в конфиг значение {:system, &quot;SOME_VARIABLE_NAME&quot;}, где SOME_VARIABLE_NAME — имя переменной окружения. Но просто так это не сработает. Нужно, чтобы читающий код умел такие случаи обрабатывать. Вот пример кода обработчика: defmodule ReadConfig def read_config({:system, environment_variable_name}) do System.get_env(environment_variable_name) end def read_config(value) do value end end Соответственно, значение получаем в коде не так: Application.get_env(:my_application, :my_configuration) а так: ReadConfig.read_config(Application.get_env(:my_application, :my_configuration)) (Приведённый код является условным и намеренно ухудшеным/упрощённым) А теперь про библиотеки И вот тут начинается самое интересное. Для того, чтобы это всё работало не только в вашем коде, но и в библиотечном, нужно, чтобы библиотека поддерживала такое же чтение конфига для {:system, &quot;SOME_VAR_NAME&quot;}. С этим, на самом деле, всё не очень хорошо. Пример из phoenix, который мне много чего сломал: url: [host: {:system, &quot;HOST&quot;}, port: {:system, &quot;PORT&quot;}, scheme: &quot;http&quot;], А если я хочу крутить протоколом доступа из переменных окружения? А вот нельзя. Пиши руками в конфиге. Или пиши в dev/prod/test конфиги отдельно. Стыд-то какой! Поменял протокол — собирай и деплой приложение. И не важно, что https терминируется за 3-4 узла до elixir-части, а тут он только для генерации ссылок написан. Эх, Крис, зачем так-то? Примеров полно. Как хороших библиотек, так и не очень. Отсюда вывод такой: если будете писать свой пакет в экосистеме elixir, то, пожалуйста, пишите его с учётом динамической конфигурации всего, что вообще конфигурируется. Это спасёт многих разработчиков от истерики и костылей. Вместо заключения Я думал, что описанное мной выше (про компилируемость языка) является очевидным. Но по какой-то причине бывшие рельсоделы не могут это понять. А жаль.</summary></entry><entry xml:lang="ru"><title type="html">Шаблонизация конфигурационных файлов nginx</title><link href="https://ivalentinee.github.io/ru/programming/2018/05/07/nginx-config-templating.html" rel="alternate" type="text/html" title="Шаблонизация конфигурационных файлов nginx" /><published>2018-05-07T00:00:00+00:00</published><updated>2018-05-07T00:00:00+00:00</updated><id>https://ivalentinee.github.io/ru/programming/2018/05/07/nginx-config-templating</id><content type="html" xml:base="https://ivalentinee.github.io/ru/programming/2018/05/07/nginx-config-templating.html">&lt;h2 id=&quot;предисловие&quot;&gt;Предисловие&lt;/h2&gt;
&lt;p&gt;Писать особо не о чем, а хочется, поэтому приходится вот такие тупые темы рассматривать. Но вдруг кому-то пригодится.&lt;/p&gt;

&lt;h2 id=&quot;зачем&quot;&gt;Зачем?&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Несколько стендов приложения. Тестовый, боевой, ещё какой-нибудь… Много их. И для всех нужен немного разный конфиг nginx.&lt;/li&gt;
  &lt;li&gt;Я хочу держать конфиг nginx в git, потому что в 2k18 этот конфиг уже давно стал частью кода приложения, а не какой-то инфраструктурщиной. То есть нужен контроль версий, code-review и прочие практики.&lt;/li&gt;
  &lt;li&gt;В то же время я не хочу держать по конфигу на каждый стенд, потому что нет совершенно никакого желания каждый раз при разворачивании стенда писать новый конфиг.&lt;/li&gt;
  &lt;li&gt;Nginx сам (&lt;a href=&quot;https://unit.nginx.org/&quot;&gt;почти&lt;/a&gt;) не умеет в динамическую конфигурацию. Даже значения из ENV жрать не может.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;что-делаем&quot;&gt;Что делаем?&lt;/h2&gt;
&lt;p&gt;Пытаемся конфигурировать nginx динамически (ну, почти) с использованием ENV-переменных. Почему ENV? Потому что мне приходится работать с &lt;a href=&quot;https://www.openshift.com/&quot;&gt;Openshift&lt;/a&gt;, в котором конфигурация через ENV является если не единственно возможной (есть ещё всякие config-map’ы), то одной из самых удобных и предсказуемых.&lt;/p&gt;

&lt;h2 id=&quot;как&quot;&gt;Как?&lt;/h2&gt;
&lt;p&gt;Очень просто. Шаблонизация.&lt;/p&gt;

&lt;h3 id=&quot;какая-шаблонизация&quot;&gt;Какая шаблонизация?&lt;/h3&gt;
&lt;p&gt;Я знаком с двумя более-менее подходящими шаблонизаторами: &lt;a href=&quot;https://ru.wikipedia.org/wiki/ERuby&quot;&gt;ERB&lt;/a&gt; и &lt;a href=&quot;https://ru.wikipedia.org/wiki/Jinja&quot;&gt;Jinja2&lt;/a&gt;. Есть ещё всякие &lt;a href=&quot;https://hexdocs.pm/eex/EEx.html&quot;&gt;EEX&lt;/a&gt; и куча других шаблонизаторов, но с ними было бы не так удобно.&lt;/p&gt;

&lt;p&gt;Так как в python я понимаю примерно ничего, то от Jinja2 я отказался. Остался ERB.&lt;/p&gt;

&lt;h3 id=&quot;как-это-всё-используем&quot;&gt;Как это всё используем?&lt;/h3&gt;
&lt;p&gt;Идея простая: при старте nginx генерируем конфиг из шаблона.&lt;/p&gt;

&lt;p&gt;Для этого нужно два скрипта: один умеет генерить конфиг из шаблона, второй — запускать первый скрипт перед nginx.&lt;/p&gt;

&lt;h4 id=&quot;генерим-конфиг&quot;&gt;Генерим конфиг&lt;/h4&gt;
&lt;p&gt;С первой задачей справляется &lt;a href=&quot;https://github.com/ivalentinee/template-renderer&quot;&gt;вот этот ruby-скрипт&lt;/a&gt;, хотя я уверен, что есть готовые и более элегантные решения. Мне было лень гуглить, поэтому я быстренько накатал своё.&lt;/p&gt;

&lt;p&gt;Для примера конфиг с опциональной базовой аутентификацией:&lt;/p&gt;
&lt;div class=&quot;language-erb highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server {
    listen 80 default_server;
    server_name &lt;span class=&quot;cp&quot;&gt;&amp;lt;%=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'SERVER_NAME'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;;

    &lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'BASIC_AUTH_ENABLED'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;
    auth_basic &quot;Restricted Content&quot;;
    auth_basic_user_file /etc/nginx/auth/htpasswd;
    &lt;span class=&quot;cp&quot;&gt;&amp;lt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;cp&quot;&gt;%&amp;gt;&lt;/span&gt;

    root /public;
    location / {
        try_files $uri $uri/index.html;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;стартуем-nginx&quot;&gt;Стартуем nginx&lt;/h4&gt;
&lt;p&gt;Со второй задачей всё ещё проще — там справляется обычный &lt;a href=&quot;http://www.gnu.org/software/bash/&quot;&gt;bash&lt;/a&gt; в пару строк (ну или что там у вас используется для shell-скриптов):&lt;/p&gt;
&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#/bin/bash&lt;/span&gt;
/usr/bin/render-template /configs/default.conf.erb /etc/nginx/conf.d/default.conf

nginx &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;daemon off;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;готово&quot;&gt;Готово!&lt;/h2&gt;
&lt;p&gt;Вы восхитительны!&lt;/p&gt;

&lt;p&gt;В результате&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Конфиг nginx находится в git (что позволяет хотя бы сделать git blame в случае полного провала).&lt;/li&gt;
  &lt;li&gt;Этот конфиг полностью отвязан от стендов. Я, например, тот же конфиг даже при разработке использую.&lt;/li&gt;
&lt;/ol&gt;</content><author><name></name></author><summary type="html">Предисловие Писать особо не о чем, а хочется, поэтому приходится вот такие тупые темы рассматривать. Но вдруг кому-то пригодится. Зачем? Несколько стендов приложения. Тестовый, боевой, ещё какой-нибудь… Много их. И для всех нужен немного разный конфиг nginx. Я хочу держать конфиг nginx в git, потому что в 2k18 этот конфиг уже давно стал частью кода приложения, а не какой-то инфраструктурщиной. То есть нужен контроль версий, code-review и прочие практики. В то же время я не хочу держать по конфигу на каждый стенд, потому что нет совершенно никакого желания каждый раз при разворачивании стенда писать новый конфиг. Nginx сам (почти) не умеет в динамическую конфигурацию. Даже значения из ENV жрать не может. Что делаем? Пытаемся конфигурировать nginx динамически (ну, почти) с использованием ENV-переменных. Почему ENV? Потому что мне приходится работать с Openshift, в котором конфигурация через ENV является если не единственно возможной (есть ещё всякие config-map’ы), то одной из самых удобных и предсказуемых. Как? Очень просто. Шаблонизация. Какая шаблонизация? Я знаком с двумя более-менее подходящими шаблонизаторами: ERB и Jinja2. Есть ещё всякие EEX и куча других шаблонизаторов, но с ними было бы не так удобно. Так как в python я понимаю примерно ничего, то от Jinja2 я отказался. Остался ERB. Как это всё используем? Идея простая: при старте nginx генерируем конфиг из шаблона. Для этого нужно два скрипта: один умеет генерить конфиг из шаблона, второй — запускать первый скрипт перед nginx. Генерим конфиг С первой задачей справляется вот этот ruby-скрипт, хотя я уверен, что есть готовые и более элегантные решения. Мне было лень гуглить, поэтому я быстренько накатал своё. Для примера конфиг с опциональной базовой аутентификацией: server { listen 80 default_server; server_name &amp;lt;%= env['SERVER_NAME'] %&amp;gt;; &amp;lt;% if env['BASIC_AUTH_ENABLED'] %&amp;gt; auth_basic &quot;Restricted Content&quot;; auth_basic_user_file /etc/nginx/auth/htpasswd; &amp;lt;% end %&amp;gt; root /public; location / { try_files $uri $uri/index.html; } } Стартуем nginx Со второй задачей всё ещё проще — там справляется обычный bash в пару строк (ну или что там у вас используется для shell-скриптов): #/bin/bash /usr/bin/render-template /configs/default.conf.erb /etc/nginx/conf.d/default.conf nginx -g &quot;daemon off;&quot; Готово! Вы восхитительны! В результате Конфиг nginx находится в git (что позволяет хотя бы сделать git blame в случае полного провала). Этот конфиг полностью отвязан от стендов. Я, например, тот же конфиг даже при разработке использую.</summary></entry></feed>